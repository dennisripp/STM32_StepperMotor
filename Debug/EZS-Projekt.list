
EZS-Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004934  08004934  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800493c  0800493c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  080049b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080049b4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f25b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020cc  00000000  00000000  0002f2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000313c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00032150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002230d  00000000  00000000  00032e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb39  00000000  00000000  0005511d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d25b2  00000000  00000000  00064c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137208  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd4  00000000  00000000  00137258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080048a0 	.word	0x080048a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	080048a0 	.word	0x080048a0

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2uiz>:
 80009a0:	004a      	lsls	r2, r1, #1
 80009a2:	d211      	bcs.n	80009c8 <__aeabi_d2uiz+0x28>
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a8:	d211      	bcs.n	80009ce <__aeabi_d2uiz+0x2e>
 80009aa:	d50d      	bpl.n	80009c8 <__aeabi_d2uiz+0x28>
 80009ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d40e      	bmi.n	80009d4 <__aeabi_d2uiz+0x34>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d102      	bne.n	80009da <__aeabi_d2uiz+0x3a>
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	4770      	bx	lr
 80009da:	f04f 0000 	mov.w	r0, #0
 80009de:	4770      	bx	lr

080009e0 <__aeabi_uldivmod>:
 80009e0:	b953      	cbnz	r3, 80009f8 <__aeabi_uldivmod+0x18>
 80009e2:	b94a      	cbnz	r2, 80009f8 <__aeabi_uldivmod+0x18>
 80009e4:	2900      	cmp	r1, #0
 80009e6:	bf08      	it	eq
 80009e8:	2800      	cmpeq	r0, #0
 80009ea:	bf1c      	itt	ne
 80009ec:	f04f 31ff 	movne.w	r1, #4294967295
 80009f0:	f04f 30ff 	movne.w	r0, #4294967295
 80009f4:	f000 b974 	b.w	8000ce0 <__aeabi_idiv0>
 80009f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a00:	f000 f806 	bl	8000a10 <__udivmoddi4>
 8000a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4770      	bx	lr

08000a10 <__udivmoddi4>:
 8000a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a14:	9d08      	ldr	r5, [sp, #32]
 8000a16:	4604      	mov	r4, r0
 8000a18:	468e      	mov	lr, r1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d14d      	bne.n	8000aba <__udivmoddi4+0xaa>
 8000a1e:	428a      	cmp	r2, r1
 8000a20:	4694      	mov	ip, r2
 8000a22:	d969      	bls.n	8000af8 <__udivmoddi4+0xe8>
 8000a24:	fab2 f282 	clz	r2, r2
 8000a28:	b152      	cbz	r2, 8000a40 <__udivmoddi4+0x30>
 8000a2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a2e:	f1c2 0120 	rsb	r1, r2, #32
 8000a32:	fa20 f101 	lsr.w	r1, r0, r1
 8000a36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000a3e:	4094      	lsls	r4, r2
 8000a40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a44:	0c21      	lsrs	r1, r4, #16
 8000a46:	fbbe f6f8 	udiv	r6, lr, r8
 8000a4a:	fa1f f78c 	uxth.w	r7, ip
 8000a4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000a52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a56:	fb06 f107 	mul.w	r1, r6, r7
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x64>
 8000a5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a66:	f080 811f 	bcs.w	8000ca8 <__udivmoddi4+0x298>
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	f240 811c 	bls.w	8000ca8 <__udivmoddi4+0x298>
 8000a70:	3e02      	subs	r6, #2
 8000a72:	4463      	add	r3, ip
 8000a74:	1a5b      	subs	r3, r3, r1
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a84:	fb00 f707 	mul.w	r7, r0, r7
 8000a88:	42a7      	cmp	r7, r4
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x92>
 8000a8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a94:	f080 810a 	bcs.w	8000cac <__udivmoddi4+0x29c>
 8000a98:	42a7      	cmp	r7, r4
 8000a9a:	f240 8107 	bls.w	8000cac <__udivmoddi4+0x29c>
 8000a9e:	4464      	add	r4, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa6:	1be4      	subs	r4, r4, r7
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	b11d      	cbz	r5, 8000ab4 <__udivmoddi4+0xa4>
 8000aac:	40d4      	lsrs	r4, r2
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab4:	4631      	mov	r1, r6
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d909      	bls.n	8000ad2 <__udivmoddi4+0xc2>
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	f000 80ef 	beq.w	8000ca2 <__udivmoddi4+0x292>
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	e9c5 0100 	strd	r0, r1, [r5]
 8000aca:	4630      	mov	r0, r6
 8000acc:	4631      	mov	r1, r6
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	fab3 f683 	clz	r6, r3
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d14a      	bne.n	8000b70 <__udivmoddi4+0x160>
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d302      	bcc.n	8000ae4 <__udivmoddi4+0xd4>
 8000ade:	4282      	cmp	r2, r0
 8000ae0:	f200 80f9 	bhi.w	8000cd6 <__udivmoddi4+0x2c6>
 8000ae4:	1a84      	subs	r4, r0, r2
 8000ae6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aea:	2001      	movs	r0, #1
 8000aec:	469e      	mov	lr, r3
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d0e0      	beq.n	8000ab4 <__udivmoddi4+0xa4>
 8000af2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000af6:	e7dd      	b.n	8000ab4 <__udivmoddi4+0xa4>
 8000af8:	b902      	cbnz	r2, 8000afc <__udivmoddi4+0xec>
 8000afa:	deff      	udf	#255	; 0xff
 8000afc:	fab2 f282 	clz	r2, r2
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	f040 8092 	bne.w	8000c2a <__udivmoddi4+0x21a>
 8000b06:	eba1 010c 	sub.w	r1, r1, ip
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f fe8c 	uxth.w	lr, ip
 8000b12:	2601      	movs	r6, #1
 8000b14:	0c20      	lsrs	r0, r4, #16
 8000b16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000b1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b22:	fb0e f003 	mul.w	r0, lr, r3
 8000b26:	4288      	cmp	r0, r1
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x12c>
 8000b2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000b2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x12a>
 8000b34:	4288      	cmp	r0, r1
 8000b36:	f200 80cb 	bhi.w	8000cd0 <__udivmoddi4+0x2c0>
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b44:	fb07 1110 	mls	r1, r7, r0, r1
 8000b48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x156>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5c:	d202      	bcs.n	8000b64 <__udivmoddi4+0x154>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f200 80bb 	bhi.w	8000cda <__udivmoddi4+0x2ca>
 8000b64:	4608      	mov	r0, r1
 8000b66:	eba4 040e 	sub.w	r4, r4, lr
 8000b6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b6e:	e79c      	b.n	8000aaa <__udivmoddi4+0x9a>
 8000b70:	f1c6 0720 	rsb	r7, r6, #32
 8000b74:	40b3      	lsls	r3, r6
 8000b76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b82:	fa01 f306 	lsl.w	r3, r1, r6
 8000b86:	431c      	orrs	r4, r3
 8000b88:	40f9      	lsrs	r1, r7
 8000b8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000b92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b96:	0c20      	lsrs	r0, r4, #16
 8000b98:	fa1f fe8c 	uxth.w	lr, ip
 8000b9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000ba0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba4:	fb08 f00e 	mul.w	r0, r8, lr
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	fa02 f206 	lsl.w	r2, r2, r6
 8000bae:	d90b      	bls.n	8000bc8 <__udivmoddi4+0x1b8>
 8000bb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bb8:	f080 8088 	bcs.w	8000ccc <__udivmoddi4+0x2bc>
 8000bbc:	4288      	cmp	r0, r1
 8000bbe:	f240 8085 	bls.w	8000ccc <__udivmoddi4+0x2bc>
 8000bc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000bc6:	4461      	add	r1, ip
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bdc:	458e      	cmp	lr, r1
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x1e2>
 8000be0:	eb1c 0101 	adds.w	r1, ip, r1
 8000be4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000be8:	d26c      	bcs.n	8000cc4 <__udivmoddi4+0x2b4>
 8000bea:	458e      	cmp	lr, r1
 8000bec:	d96a      	bls.n	8000cc4 <__udivmoddi4+0x2b4>
 8000bee:	3802      	subs	r0, #2
 8000bf0:	4461      	add	r1, ip
 8000bf2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf6:	fba0 9402 	umull	r9, r4, r0, r2
 8000bfa:	eba1 010e 	sub.w	r1, r1, lr
 8000bfe:	42a1      	cmp	r1, r4
 8000c00:	46c8      	mov	r8, r9
 8000c02:	46a6      	mov	lr, r4
 8000c04:	d356      	bcc.n	8000cb4 <__udivmoddi4+0x2a4>
 8000c06:	d053      	beq.n	8000cb0 <__udivmoddi4+0x2a0>
 8000c08:	b15d      	cbz	r5, 8000c22 <__udivmoddi4+0x212>
 8000c0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000c0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000c12:	fa01 f707 	lsl.w	r7, r1, r7
 8000c16:	fa22 f306 	lsr.w	r3, r2, r6
 8000c1a:	40f1      	lsrs	r1, r6
 8000c1c:	431f      	orrs	r7, r3
 8000c1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000c22:	2600      	movs	r6, #0
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	f1c2 0320 	rsb	r3, r2, #32
 8000c2e:	40d8      	lsrs	r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	fa21 f303 	lsr.w	r3, r1, r3
 8000c38:	4091      	lsls	r1, r2
 8000c3a:	4301      	orrs	r1, r0
 8000c3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c40:	fa1f fe8c 	uxth.w	lr, ip
 8000c44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c48:	fb07 3610 	mls	r6, r7, r0, r3
 8000c4c:	0c0b      	lsrs	r3, r1, #16
 8000c4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c52:	fb00 f60e 	mul.w	r6, r0, lr
 8000c56:	429e      	cmp	r6, r3
 8000c58:	fa04 f402 	lsl.w	r4, r4, r2
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x260>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c66:	d22f      	bcs.n	8000cc8 <__udivmoddi4+0x2b8>
 8000c68:	429e      	cmp	r6, r3
 8000c6a:	d92d      	bls.n	8000cc8 <__udivmoddi4+0x2b8>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	b289      	uxth	r1, r1
 8000c74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c78:	fb07 3316 	mls	r3, r7, r6, r3
 8000c7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c80:	fb06 f30e 	mul.w	r3, r6, lr
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x28a>
 8000c88:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c90:	d216      	bcs.n	8000cc0 <__udivmoddi4+0x2b0>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d914      	bls.n	8000cc0 <__udivmoddi4+0x2b0>
 8000c96:	3e02      	subs	r6, #2
 8000c98:	4461      	add	r1, ip
 8000c9a:	1ac9      	subs	r1, r1, r3
 8000c9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca0:	e738      	b.n	8000b14 <__udivmoddi4+0x104>
 8000ca2:	462e      	mov	r6, r5
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	e705      	b.n	8000ab4 <__udivmoddi4+0xa4>
 8000ca8:	4606      	mov	r6, r0
 8000caa:	e6e3      	b.n	8000a74 <__udivmoddi4+0x64>
 8000cac:	4618      	mov	r0, r3
 8000cae:	e6f8      	b.n	8000aa2 <__udivmoddi4+0x92>
 8000cb0:	454b      	cmp	r3, r9
 8000cb2:	d2a9      	bcs.n	8000c08 <__udivmoddi4+0x1f8>
 8000cb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000cb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cbc:	3801      	subs	r0, #1
 8000cbe:	e7a3      	b.n	8000c08 <__udivmoddi4+0x1f8>
 8000cc0:	4646      	mov	r6, r8
 8000cc2:	e7ea      	b.n	8000c9a <__udivmoddi4+0x28a>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	e794      	b.n	8000bf2 <__udivmoddi4+0x1e2>
 8000cc8:	4640      	mov	r0, r8
 8000cca:	e7d1      	b.n	8000c70 <__udivmoddi4+0x260>
 8000ccc:	46d0      	mov	r8, sl
 8000cce:	e77b      	b.n	8000bc8 <__udivmoddi4+0x1b8>
 8000cd0:	3b02      	subs	r3, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	e732      	b.n	8000b3c <__udivmoddi4+0x12c>
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	e709      	b.n	8000aee <__udivmoddi4+0xde>
 8000cda:	4464      	add	r4, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e742      	b.n	8000b66 <__udivmoddi4+0x156>

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <__io_getchar>:
UART_HandleTypeDef return_uart() {
	return huart2;
}

GETCHAR_PROTOTYPE
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <__io_getchar+0x48>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__io_getchar+0x48>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d04:	1df9      	adds	r1, r7, #7
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <__io_getchar+0x48>)
 8000d0e:	f002 fdca 	bl	80038a6 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d12:	1df9      	adds	r1, r7, #7
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <__io_getchar+0x48>)
 8000d1c:	f002 fd31 	bl	8003782 <HAL_UART_Transmit>
  return ch;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000008c 	.word	0x2000008c

08000d30 <_write>:
#define release 0
#define debug 1


int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 2000);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <_write+0x28>)
 8000d48:	f002 fd1b 	bl	8003782 <HAL_UART_Transmit>
	return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000008c 	.word	0x2000008c

08000d5c <resetSTDINBuf>:

void resetSTDINBuf(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	  setvbuf(stdin, NULL, _IONBF, 0);
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <resetSTDINBuf+0x18>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6858      	ldr	r0, [r3, #4]
 8000d66:	2300      	movs	r3, #0
 8000d68:	2202      	movs	r2, #2
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f003 f952 	bl	8004014 <setvbuf>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000000c 	.word	0x2000000c

08000d78 <main>:


int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0c0      	sub	sp, #256	; 0x100
 8000d7c:	af00      	add	r7, sp, #0

  HAL_Init();
 8000d7e:	f000 fdf5 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f821 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f000 f8b7 	bl	8000ef8 <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, LED, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <main+0x4c>)
 8000d90:	f001 f904 	bl	8001f9c <HAL_GPIO_WritePin>

  MX_USART2_UART_Init();
 8000d94:	f000 f886 	bl	8000ea4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d98:	f000 fb40 	bl	800141c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d9c:	f000 fb8a 	bl	80014b4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000da0:	f000 fbd6 	bl	8001550 <MX_TIM5_Init>
  set_motor_direction(CLOCKWISE);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f000 f953 	bl	8001050 <set_motor_direction>
  TIM_StartInterruptTimer();
 8000daa:	f000 fadd 	bl	8001368 <TIM_StartInterruptTimer>
  resetSTDINBuf();
 8000dae:	f7ff ffd5 	bl	8000d5c <resetSTDINBuf>
  TIM_StartIntegralInterruptTimer();
 8000db2:	f000 fae3 	bl	800137c <TIM_StartIntegralInterruptTimer>
  TIM_StartTrackInterruptTimer();
 8000db6:	f000 faeb 	bl	8001390 <TIM_StartTrackInterruptTimer>

  while (1)
  {

#if debug
	  debug_mode(1200);
 8000dba:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000dbe:	f000 f9c7 	bl	8001150 <debug_mode>
 8000dc2:	e7fa      	b.n	8000dba <main+0x42>
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b094      	sub	sp, #80	; 0x50
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2234      	movs	r2, #52	; 0x34
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 f914 	bl	8004004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <SystemClock_Config+0xd4>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a29      	ldr	r2, [pc, #164]	; (8000e9c <SystemClock_Config+0xd4>)
 8000df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <SystemClock_Config+0xd4>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e08:	2300      	movs	r3, #0
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <SystemClock_Config+0xd8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e14:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <SystemClock_Config+0xd8>)
 8000e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <SystemClock_Config+0xd8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e30:	2310      	movs	r3, #16
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e34:	2302      	movs	r3, #2
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000e40:	2350      	movs	r3, #80	; 0x50
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fc1f 	bl	8002698 <HAL_RCC_OscConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e60:	f000 f8d0 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e64:	230f      	movs	r3, #15
 8000e66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	2102      	movs	r1, #2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 f8be 	bl	8002004 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e8e:	f000 f8b9 	bl	8001004 <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3750      	adds	r7, #80	; 0x50
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40007000 	.word	0x40007000

08000ea4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <MX_USART2_UART_Init+0x50>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000edc:	f002 fc04 	bl	80036e8 <HAL_UART_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ee6:	f000 f88d 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000008c 	.word	0x2000008c
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a37      	ldr	r2, [pc, #220]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a30      	ldr	r2, [pc, #192]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MX_GPIO_Init+0xfc>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000f84:	481c      	ldr	r0, [pc, #112]	; (8000ff8 <MX_GPIO_Init+0x100>)
 8000f86:	f001 f809 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	481b      	ldr	r0, [pc, #108]	; (8000ffc <MX_GPIO_Init+0x104>)
 8000f90:	f001 f804 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4815      	ldr	r0, [pc, #84]	; (8001000 <MX_GPIO_Init+0x108>)
 8000fac:	f000 fe62 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000fb0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <MX_GPIO_Init+0x100>)
 8000fca:	f000 fe53 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fce:	2310      	movs	r3, #16
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_GPIO_Init+0x104>)
 8000fe6:	f000 fe45 	bl	8001c74 <HAL_GPIO_Init>

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40020800 	.word	0x40020800

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>
	...

08001010 <set_pulse_flag>:

uint8_t getIntegralFlag() {
	return integral_flag;
}

void set_pulse_flag(uint8_t val) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	pulse_flag = val;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <set_pulse_flag+0x1c>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	7013      	strb	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	200000d0 	.word	0x200000d0

08001030 <set_integral_flag>:

void set_integral_flag(uint8_t val) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	integral_flag = val;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <set_integral_flag+0x1c>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	7013      	strb	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	200000d1 	.word	0x200000d1

08001050 <set_motor_direction>:


void set_motor_direction(uint8_t dir) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	motor_direction = dir;
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <set_motor_direction+0x24>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(DIRX_PORT, DIRX_PIN, dir);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	461a      	mov	r2, r3
 8001064:	2110      	movs	r1, #16
 8001066:	4804      	ldr	r0, [pc, #16]	; (8001078 <set_motor_direction+0x28>)
 8001068:	f000 ff98 	bl	8001f9c <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200001ac 	.word	0x200001ac
 8001078:	40020400 	.word	0x40020400

0800107c <rpm_to_period>:
			idx++;
		}
	}
}

uint16_t rpm_to_period(uint16_t velocity) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]

	double micro_period = (1000.0/((double)velocity / 60.0))/STEP_TOTAL_360 * 1000.0 / 2;
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f9fd 	bl	8000488 <__aeabi_ui2d>
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <rpm_to_period+0x80>)
 8001094:	f7ff fb9c 	bl	80007d0 <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	f04f 0000 	mov.w	r0, #0
 80010a0:	4917      	ldr	r1, [pc, #92]	; (8001100 <rpm_to_period+0x84>)
 80010a2:	f7ff fb95 	bl	80007d0 <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <rpm_to_period+0x88>)
 80010b4:	f7ff fb8c 	bl	80007d0 <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <rpm_to_period+0x84>)
 80010c6:	f7ff fa59 	bl	800057c <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010da:	f7ff fb79 	bl	80007d0 <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return (uint16_t)micro_period;
 80010e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010ea:	f7ff fc59 	bl	80009a0 <__aeabi_d2uiz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29b      	uxth	r3, r3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	404e0000 	.word	0x404e0000
 8001100:	408f4000 	.word	0x408f4000
 8001104:	40690000 	.word	0x40690000

08001108 <update_step_count>:

void update_step_count(uint8_t dir) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	if(motor_direction == CLOCKWISE) {
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <update_step_count+0x40>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d104      	bne.n	8001126 <update_step_count+0x1e>
		current_step++;
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <update_step_count+0x44>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <update_step_count+0x44>)
 8001124:	6013      	str	r3, [r2, #0]
	}
	if(motor_direction == COUNTERCLOCK) {
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <update_step_count+0x40>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d104      	bne.n	800113a <update_step_count+0x32>
		current_step--;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <update_step_count+0x44>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <update_step_count+0x44>)
 8001138:	6013      	str	r3, [r2, #0]
	}
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200001ac 	.word	0x200001ac
 800114c:	200001b0 	.word	0x200001b0

08001150 <debug_mode>:
			}
		}
	}
}

void debug_mode(uint16_t rpm) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b098      	sub	sp, #96	; 0x60
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
	int current_period = START_PERIOD;
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	65fb      	str	r3, [r7, #92]	; 0x5c

	rpm = rpm > 1200 ? 1200: rpm;
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001166:	bf28      	it	cs
 8001168:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
 800116c:	80fb      	strh	r3, [r7, #6]

	int micro_second = rpm_to_period(rpm);
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff83 	bl	800107c <rpm_to_period>
 8001176:	4603      	mov	r3, r0
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
	int offset = micro_second >= 1000 ? 3 : 1;
 800117a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800117c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001180:	db01      	blt.n	8001186 <debug_mode+0x36>
 8001182:	2303      	movs	r3, #3
 8001184:	e000      	b.n	8001188 <debug_mode+0x38>
 8001186:	2301      	movs	r3, #1
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
	int aim = micro_second - offset;
 800118a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800118c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	637b      	str	r3, [r7, #52]	; 0x34

	int minuend = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	65bb      	str	r3, [r7, #88]	; 0x58
	int running = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t steps_current = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t steps_last = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	653b      	str	r3, [r7, #80]	; 0x50

	uint32_t velocity_rpm_current = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t velocity_rpm_last = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c

	__HAL_TIM_SetCounter(&htim5, 0);
 80011aa:	4b69      	ldr	r3, [pc, #420]	; (8001350 <debug_mode+0x200>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t timestamp_current = __HAL_TIM_GetCounter(&htim5);
 80011b2:	4b67      	ldr	r3, [pc, #412]	; (8001350 <debug_mode+0x200>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t timestamp_last = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t speed_current = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
	int32_t speed_last = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]

	uint8_t count_flag = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t hit_max = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint8_t is_max = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	uint32_t integral_cnt = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t integral = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	643b      	str	r3, [r7, #64]	; 0x40

	uint32_t keep_max = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
	while(running) {
 80011e4:	e0ab      	b.n	800133e <debug_mode+0x1ee>
		while(pulse_flag&(1<<0)) {
			toggle_half_step();
 80011e6:	f000 f8dd 	bl	80013a4 <toggle_half_step>
			//reset interrupt flag
			set_pulse_flag(0);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ff10 	bl	8001010 <set_pulse_flag>
			//toggle step count flag -> 2 halfsteps = 1 step
			count_flag ^= 1UL << 0;
 80011f0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			//only do stuff when full step was executed
			if(count_flag&(1<<0))continue;
 80011fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d000      	beq.n	800120a <debug_mode+0xba>
 8001208:	e091      	b.n	800132e <debug_mode+0x1de>

			if(integral_flag&(1<<0)) {
 800120a:	4b52      	ldr	r3, [pc, #328]	; (8001354 <debug_mode+0x204>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 808a 	beq.w	800132e <debug_mode+0x1de>

				//calculate
				if(!is_max) current_period = current_period - minuend <= aim ? aim : current_period - minuend;
 800121a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800121e:	2b00      	cmp	r3, #0
 8001220:	d107      	bne.n	8001232 <debug_mode+0xe2>
 8001222:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800122a:	4293      	cmp	r3, r2
 800122c:	bfb8      	it	lt
 800122e:	4613      	movlt	r3, r2
 8001230:	65fb      	str	r3, [r7, #92]	; 0x5c
				set_integral_flag(0);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fefc 	bl	8001030 <set_integral_flag>
				__HAL_TIM_SET_AUTORELOAD(&htim2, current_period);
 8001238:	4b47      	ldr	r3, [pc, #284]	; (8001358 <debug_mode+0x208>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001242:	4a45      	ldr	r2, [pc, #276]	; (8001358 <debug_mode+0x208>)
 8001244:	60d3      	str	r3, [r2, #12]
				set_pulse_flag(0);
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fee2 	bl	8001010 <set_pulse_flag>

				//tweak acceleration depending on period and torque
				if(hit_max) {
 800124c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <debug_mode+0x11c>
					if(current_period > 400){
 8001254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001256:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800125a:	dd03      	ble.n	8001264 <debug_mode+0x114>
						minuend = -10;
 800125c:	f06f 0309 	mvn.w	r3, #9
 8001260:	65bb      	str	r3, [r7, #88]	; 0x58
 8001262:	e00c      	b.n	800127e <debug_mode+0x12e>
					} else
						minuend = -1;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	65bb      	str	r3, [r7, #88]	; 0x58
 800126a:	e008      	b.n	800127e <debug_mode+0x12e>
				} else {
					if(current_period > 400){
 800126c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800126e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001272:	dd02      	ble.n	800127a <debug_mode+0x12a>
						minuend = 10;
 8001274:	230a      	movs	r3, #10
 8001276:	65bb      	str	r3, [r7, #88]	; 0x58
 8001278:	e001      	b.n	800127e <debug_mode+0x12e>
					} else
						minuend = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	65bb      	str	r3, [r7, #88]	; 0x58
				}


				if(aim == current_period && !hit_max){
 800127e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001282:	429a      	cmp	r2, r3
 8001284:	d111      	bne.n	80012aa <debug_mode+0x15a>
 8001286:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10d      	bne.n	80012aa <debug_mode+0x15a>
					__HAL_TIM_SetCounter(&htim5, 0);
 800128e:	4b30      	ldr	r3, [pc, #192]	; (8001350 <debug_mode+0x200>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
					hit_max = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
					is_max = 1;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
					keep_max = __HAL_TIM_GetCounter(&htim5);
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <debug_mode+0x200>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	61bb      	str	r3, [r7, #24]

				}


				//break from loop
				if(current_period >= START_PERIOD) running = 0;
 80012aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012b0:	db01      	blt.n	80012b6 <debug_mode+0x166>
 80012b2:	2300      	movs	r3, #0
 80012b4:	657b      	str	r3, [r7, #84]	; 0x54

				timestamp_current = __HAL_TIM_GetCounter(&htim5);
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <debug_mode+0x200>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
				steps_current = current_step;
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <debug_mode+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30

				int32_t step_delta = steps_current - steps_last;
 80012c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
				int32_t periods_per_second = (1000/(INTEGRAL_PERIOD/1000));
 80012cc:	2314      	movs	r3, #20
 80012ce:	613b      	str	r3, [r7, #16]
				const uint8_t MINUTE_MULTI = 60;
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	73fb      	strb	r3, [r7, #15]

				velocity_rpm_current = (step_delta * periods_per_second * MINUTE_MULTI / STEP_TOTAL_360) / 2; // /2 weil 2 impulse pro schritt
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <debug_mode+0x210>)
 80012e4:	fb82 1203 	smull	r1, r2, r2, r3
 80012e8:	11d2      	asrs	r2, r2, #7
 80012ea:	17db      	asrs	r3, r3, #31
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
				speed_current = (velocity_rpm_current - velocity_rpm_last);
 80012f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	623b      	str	r3, [r7, #32]

				integral += step_delta / (INTEGRAL_PERIOD/1000);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	4a19      	ldr	r2, [pc, #100]	; (8001360 <debug_mode+0x210>)
 80012fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001300:	1112      	asrs	r2, r2, #4
 8001302:	17db      	asrs	r3, r3, #31
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	461a      	mov	r2, r3
 8001308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800130a:	4413      	add	r3, r2
 800130c:	643b      	str	r3, [r7, #64]	; 0x40

				int32_t val = integral / integral_cnt;
 800130e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	60bb      	str	r3, [r7, #8]
						(timestamp_current - timestamp_last));

				printf("integral: %ld\n\r", val);
				printf("delta steps: %ld\n\r", steps_current - steps_last);
#endif
				velocity_rpm_last = velocity_rpm_current;
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	64fb      	str	r3, [r7, #76]	; 0x4c
				steps_last = steps_current;
 800131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131e:	653b      	str	r3, [r7, #80]	; 0x50
				timestamp_last = timestamp_current;
 8001320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
				speed_last = speed_current;
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	61fb      	str	r3, [r7, #28]
				integral_cnt++;
 8001328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800132a:	3301      	adds	r3, #1
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
		while(pulse_flag&(1<<0)) {
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <debug_mode+0x214>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	f47f af54 	bne.w	80011e6 <debug_mode+0x96>
	while(running) {
 800133e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f4      	bne.n	800132e <debug_mode+0x1de>
			}
		}
	}
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3760      	adds	r7, #96	; 0x60
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000164 	.word	0x20000164
 8001354:	200000d1 	.word	0x200000d1
 8001358:	200000d4 	.word	0x200000d4
 800135c:	200001b0 	.word	0x200001b0
 8001360:	51eb851f 	.word	0x51eb851f
 8001364:	200000d0 	.word	0x200000d0

08001368 <TIM_StartInterruptTimer>:


void TIM_StartInterruptTimer()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <TIM_StartInterruptTimer+0x10>)
 800136e:	f001 fc81 	bl	8002c74 <HAL_TIM_Base_Start_IT>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000d4 	.word	0x200000d4

0800137c <TIM_StartIntegralInterruptTimer>:

void TIM_StartIntegralInterruptTimer()
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM_StartIntegralInterruptTimer+0x10>)
 8001382:	f001 fc77 	bl	8002c74 <HAL_TIM_Base_Start_IT>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000011c 	.word	0x2000011c

08001390 <TIM_StartTrackInterruptTimer>:

void TIM_StartTrackInterruptTimer()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim5);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <TIM_StartTrackInterruptTimer+0x10>)
 8001396:	f001 fc6d 	bl	8002c74 <HAL_TIM_Base_Start_IT>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000164 	.word	0x20000164

080013a4 <toggle_half_step>:
{
	HAL_TIM_Base_Start_IT(&htim2);
}


void toggle_half_step() {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(STEPX_PORT, STEPX_PIN);
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <toggle_half_step+0x20>)
 80013ae:	f000 fe0e 	bl	8001fce <HAL_GPIO_TogglePin>
	 update_step_count(motor_direction);
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <toggle_half_step+0x24>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fea5 	bl	8001108 <update_step_count>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40020000 	.word	0x40020000
 80013c8:	200001ac 	.word	0x200001ac

080013cc <HAL_TIM_STEP_PeriodElapsedCallback>:

void HAL_TIM_STEP_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	pulse_flag |= (1<<0);
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_TIM_STEP_PeriodElapsedCallback+0x24>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_TIM_STEP_PeriodElapsedCallback+0x24>)
 80013e2:	701a      	strb	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	200000d0 	.word	0x200000d0

080013f4 <HAL_TIM_INT_PeriodElapsedCallback>:

void HAL_TIM_INT_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	integral_flag |= (1<<0);
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_TIM_INT_PeriodElapsedCallback+0x24>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_TIM_INT_PeriodElapsedCallback+0x24>)
 800140a:	701a      	strb	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	200000d1 	.word	0x200000d1

0800141c <MX_TIM2_Init>:


void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM2_Init+0x94>)
 800143a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001442:	224f      	movs	r2, #79	; 0x4f
 8001444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = START_PERIOD;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_TIM2_Init+0x94>)
 800144e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_TIM2_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001462:	f001 fbb7 	bl	8002bd4 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800146c:	f7ff fdca 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_TIM2_Init+0x94>)
 800147e:	f001 fe79 	bl	8003174 <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001488:	f7ff fdbc 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_TIM2_Init+0x94>)
 800149a:	f002 f895 	bl	80035c8 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a4:	f7ff fdae 	bl	8001004 <Error_Handler>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200000d4 	.word	0x200000d4

080014b4 <MX_TIM3_Init>:


void MX_TIM3_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <MX_TIM3_Init+0x94>)
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <MX_TIM3_Init+0x98>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <MX_TIM3_Init+0x94>)
 80014d8:	224f      	movs	r2, #79	; 0x4f
 80014da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_TIM3_Init+0x94>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = INTEGRAL_PERIOD;
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <MX_TIM3_Init+0x94>)
 80014e4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80014e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_TIM3_Init+0x94>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_TIM3_Init+0x94>)
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014f6:	4814      	ldr	r0, [pc, #80]	; (8001548 <MX_TIM3_Init+0x94>)
 80014f8:	f001 fb6c 	bl	8002bd4 <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001502:	f7ff fd7f 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	4619      	mov	r1, r3
 8001512:	480d      	ldr	r0, [pc, #52]	; (8001548 <MX_TIM3_Init+0x94>)
 8001514:	f001 fe2e 	bl	8003174 <HAL_TIM_ConfigClockSource>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800151e:	f7ff fd71 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_TIM3_Init+0x94>)
 8001530:	f002 f84a 	bl	80035c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800153a:	f7ff fd63 	bl	8001004 <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000011c 	.word	0x2000011c
 800154c:	40000400 	.word	0x40000400

08001550 <MX_TIM5_Init>:

void MX_TIM5_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_TIM5_Init+0x94>)
 800156e:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <MX_TIM5_Init+0x98>)
 8001570:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_TIM5_Init+0x94>)
 8001574:	224f      	movs	r2, #79	; 0x4f
 8001576:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_TIM5_Init+0x94>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295; //max val
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_TIM5_Init+0x94>)
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	60da      	str	r2, [r3, #12]
  	  	  	  	  	//191231209
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_TIM5_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_TIM5_Init+0x94>)
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001592:	4814      	ldr	r0, [pc, #80]	; (80015e4 <MX_TIM5_Init+0x94>)
 8001594:	f001 fb1e 	bl	8002bd4 <HAL_TIM_Base_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800159e:	f7ff fd31 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <MX_TIM5_Init+0x94>)
 80015b0:	f001 fde0 	bl	8003174 <HAL_TIM_ConfigClockSource>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80015ba:	f7ff fd23 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015c6:	463b      	mov	r3, r7
 80015c8:	4619      	mov	r1, r3
 80015ca:	4806      	ldr	r0, [pc, #24]	; (80015e4 <MX_TIM5_Init+0x94>)
 80015cc:	f001 fffc 	bl	80035c8 <HAL_TIMEx_MasterConfigSynchronization>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80015d6:	f7ff fd15 	bl	8001004 <Error_Handler>
  }
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000164 	.word	0x20000164
 80015e8:	40000c00 	.word	0x40000c00

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_MspInit+0x4c>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_MspInit+0x4c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_MspInit+0x4c>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_MspInit+0x4c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800162a:	2005      	movs	r0, #5
 800162c:	f000 fae0 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800

0800163c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164c:	d116      	bne.n	800167c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_TIM_Base_MspInit+0xa8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <HAL_TIM_Base_MspInit+0xa8>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <HAL_TIM_Base_MspInit+0xa8>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	201c      	movs	r0, #28
 8001670:	f000 fac9 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001674:	201c      	movs	r0, #28
 8001676:	f000 fae2 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800167a:	e02e      	b.n	80016da <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <HAL_TIM_Base_MspInit+0xac>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d116      	bne.n	80016b4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_TIM_Base_MspInit+0xa8>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <HAL_TIM_Base_MspInit+0xa8>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HAL_TIM_Base_MspInit+0xa8>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2101      	movs	r1, #1
 80016a6:	201d      	movs	r0, #29
 80016a8:	f000 faad 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016ac:	201d      	movs	r0, #29
 80016ae:	f000 fac6 	bl	8001c3e <HAL_NVIC_EnableIRQ>
}
 80016b2:	e012      	b.n	80016da <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <HAL_TIM_Base_MspInit+0xb0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10d      	bne.n	80016da <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_TIM_Base_MspInit+0xa8>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_TIM_Base_MspInit+0xa8>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_TIM_Base_MspInit+0xa8>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40000400 	.word	0x40000400
 80016ec:	40000c00 	.word	0x40000c00

080016f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <HAL_UART_MspInit+0x84>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12b      	bne.n	800176a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_UART_MspInit+0x88>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_UART_MspInit+0x88>)
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_UART_MspInit+0x88>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_UART_MspInit+0x88>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_UART_MspInit+0x88>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_UART_MspInit+0x88>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800174a:	230c      	movs	r3, #12
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175a:	2307      	movs	r3, #7
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <HAL_UART_MspInit+0x8c>)
 8001766:	f000 fa85 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40004400 	.word	0x40004400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <NMI_Handler+0x4>

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler+0x4>

08001792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <UsageFault_Handler+0x4>

0800179e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 f920 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_STEP_IRQHandler(&htim2);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM2_IRQHandler+0x10>)
 80017da:	f001 fabb 	bl	8002d54 <HAL_TIM_STEP_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200000d4 	.word	0x200000d4

080017e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
//	set_integral_flag(1);
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_INT_IRQHandler(&htim3);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM3_IRQHandler+0x10>)
 80017ee:	f001 fbb9 	bl	8002f64 <HAL_TIM_INT_IRQHandler>

  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000011c 	.word	0x2000011c

080017fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e00a      	b.n	8001824 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800180e:	f7ff fa69 	bl	8000ce4 <__io_getchar>
 8001812:	4601      	mov	r1, r0
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	b2ca      	uxtb	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbf0      	blt.n	800180e <_read+0x12>
	}

return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
	return -1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185e:	605a      	str	r2, [r3, #4]
	return 0;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	return 0;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001890:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <_sbrk+0x5c>)
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <_sbrk+0x60>)
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <_sbrk+0x64>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <_sbrk+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d207      	bcs.n	80018c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b8:	f002 fb7a 	bl	8003fb0 <__errno>
 80018bc:	4603      	mov	r3, r0
 80018be:	220c      	movs	r2, #12
 80018c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	e009      	b.n	80018dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <_sbrk+0x64>)
 80018d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20020000 	.word	0x20020000
 80018e8:	00000400 	.word	0x00000400
 80018ec:	200001b4 	.word	0x200001b4
 80018f0:	200001d0 	.word	0x200001d0

080018f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <SystemInit+0x20>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <SystemInit+0x20>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800191e:	490e      	ldr	r1, [pc, #56]	; (8001958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001920:	4a0e      	ldr	r2, [pc, #56]	; (800195c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001934:	4c0b      	ldr	r4, [pc, #44]	; (8001964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001942:	f7ff ffd7 	bl	80018f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f002 fb39 	bl	8003fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff fa15 	bl	8000d78 <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800195c:	08004944 	.word	0x08004944
  ldr r2, =_sbss
 8001960:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001964:	200001cc 	.word	0x200001cc

08001968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <HAL_Init+0x40>)
 8001976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_Init+0x40>)
 8001982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x40>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f92b 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fe24 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f943 	bl	8001c5a <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 f90b 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	200001b8 	.word	0x200001b8

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200001b8 	.word	0x200001b8

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	e165      	b.n	8001f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f040 8154 	bne.w	8001f56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d005      	beq.n	8001cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d017      	beq.n	8001d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d123      	bne.n	8001db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	08da      	lsrs	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3208      	adds	r2, #8
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3208      	adds	r2, #8
 8001db2:	69b9      	ldr	r1, [r7, #24]
 8001db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0203 	and.w	r2, r3, #3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80ae 	beq.w	8001f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	; (8001f74 <HAL_GPIO_Init+0x300>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_GPIO_Init+0x300>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <HAL_GPIO_Init+0x300>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e16:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_GPIO_Init+0x304>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4f      	ldr	r2, [pc, #316]	; (8001f7c <HAL_GPIO_Init+0x308>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4e      	ldr	r2, [pc, #312]	; (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_Init+0x216>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4d      	ldr	r2, [pc, #308]	; (8001f84 <HAL_GPIO_Init+0x310>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4c      	ldr	r2, [pc, #304]	; (8001f88 <HAL_GPIO_Init+0x314>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x20e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <HAL_GPIO_Init+0x318>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x20a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4a      	ldr	r2, [pc, #296]	; (8001f90 <HAL_GPIO_Init+0x31c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x206>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a49      	ldr	r2, [pc, #292]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x202>
 8001e72:	2306      	movs	r3, #6
 8001e74:	e00c      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e76:	2307      	movs	r3, #7
 8001e78:	e00a      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e7a:	2305      	movs	r3, #5
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea0:	4935      	ldr	r1, [pc, #212]	; (8001f78 <HAL_GPIO_Init+0x304>)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f26:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f50:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b0f      	cmp	r3, #15
 8001f60:	f67f ae96 	bls.w	8001c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40021400 	.word	0x40021400
 8001f94:	40021800 	.word	0x40021800
 8001f98:	40013c00 	.word	0x40013c00

08001f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fac:	787b      	ldrb	r3, [r7, #1]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fb8:	e003      	b.n	8001fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	041a      	lsls	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	619a      	str	r2, [r3, #24]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fe0:	887a      	ldrh	r2, [r7, #2]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	041a      	lsls	r2, r3, #16
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	400b      	ands	r3, r1
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0cc      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b68      	ldr	r3, [pc, #416]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d90c      	bls.n	8002040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b65      	ldr	r3, [pc, #404]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b63      	ldr	r3, [pc, #396]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0b8      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002058:	4b59      	ldr	r3, [pc, #356]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a58      	ldr	r2, [pc, #352]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002062:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800207a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207c:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	494d      	ldr	r1, [pc, #308]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d044      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d119      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e07f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d003      	beq.n	80020c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e067      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4934      	ldr	r1, [pc, #208]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7ff fca0 	bl	8001a38 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff fc9c 	bl	8001a38 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e04f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d20c      	bcs.n	800214c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e032      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4916      	ldr	r1, [pc, #88]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	490e      	ldr	r1, [pc, #56]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800218a:	f000 f855 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 800218e:	4602      	mov	r2, r0
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	490a      	ldr	r1, [pc, #40]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	5ccb      	ldrb	r3, [r1, r3]
 800219e:	fa22 f303 	lsr.w	r3, r2, r3
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x1c8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fc00 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00
 80021c0:	40023800 	.word	0x40023800
 80021c4:	080048b8 	.word	0x080048b8
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000004 	.word	0x20000004

080021d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000000 	.word	0x20000000

080021e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021ec:	f7ff fff0 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0a9b      	lsrs	r3, r3, #10
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	; (800220c <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	080048c8 	.word	0x080048c8

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002214:	f7ff ffdc 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	0b5b      	lsrs	r3, r3, #13
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	080048c8 	.word	0x080048c8

08002238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800223c:	b0ae      	sub	sp, #184	; 0xb8
 800223e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800225e:	4bcb      	ldr	r3, [pc, #812]	; (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b0c      	cmp	r3, #12
 8002268:	f200 8206 	bhi.w	8002678 <HAL_RCC_GetSysClockFreq+0x440>
 800226c:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <HAL_RCC_GetSysClockFreq+0x3c>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	080022a9 	.word	0x080022a9
 8002278:	08002679 	.word	0x08002679
 800227c:	08002679 	.word	0x08002679
 8002280:	08002679 	.word	0x08002679
 8002284:	080022b1 	.word	0x080022b1
 8002288:	08002679 	.word	0x08002679
 800228c:	08002679 	.word	0x08002679
 8002290:	08002679 	.word	0x08002679
 8002294:	080022b9 	.word	0x080022b9
 8002298:	08002679 	.word	0x08002679
 800229c:	08002679 	.word	0x08002679
 80022a0:	08002679 	.word	0x08002679
 80022a4:	080024a9 	.word	0x080024a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a8:	4bb9      	ldr	r3, [pc, #740]	; (8002590 <HAL_RCC_GetSysClockFreq+0x358>)
 80022aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80022ae:	e1e7      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b0:	4bb8      	ldr	r3, [pc, #736]	; (8002594 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022b6:	e1e3      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b8:	4bb4      	ldr	r3, [pc, #720]	; (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c4:	4bb1      	ldr	r3, [pc, #708]	; (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d071      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d0:	4bae      	ldr	r3, [pc, #696]	; (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	2200      	movs	r2, #0
 80022d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80022e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022f6:	4622      	mov	r2, r4
 80022f8:	462b      	mov	r3, r5
 80022fa:	f04f 0000 	mov.w	r0, #0
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	0159      	lsls	r1, r3, #5
 8002304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002308:	0150      	lsls	r0, r2, #5
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4621      	mov	r1, r4
 8002310:	1a51      	subs	r1, r2, r1
 8002312:	6439      	str	r1, [r7, #64]	; 0x40
 8002314:	4629      	mov	r1, r5
 8002316:	eb63 0301 	sbc.w	r3, r3, r1
 800231a:	647b      	str	r3, [r7, #68]	; 0x44
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002328:	4649      	mov	r1, r9
 800232a:	018b      	lsls	r3, r1, #6
 800232c:	4641      	mov	r1, r8
 800232e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002332:	4641      	mov	r1, r8
 8002334:	018a      	lsls	r2, r1, #6
 8002336:	4641      	mov	r1, r8
 8002338:	1a51      	subs	r1, r2, r1
 800233a:	63b9      	str	r1, [r7, #56]	; 0x38
 800233c:	4649      	mov	r1, r9
 800233e:	eb63 0301 	sbc.w	r3, r3, r1
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002350:	4649      	mov	r1, r9
 8002352:	00cb      	lsls	r3, r1, #3
 8002354:	4641      	mov	r1, r8
 8002356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800235a:	4641      	mov	r1, r8
 800235c:	00ca      	lsls	r2, r1, #3
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	4603      	mov	r3, r0
 8002364:	4622      	mov	r2, r4
 8002366:	189b      	adds	r3, r3, r2
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
 800236a:	462b      	mov	r3, r5
 800236c:	460a      	mov	r2, r1
 800236e:	eb42 0303 	adc.w	r3, r2, r3
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002380:	4629      	mov	r1, r5
 8002382:	024b      	lsls	r3, r1, #9
 8002384:	4621      	mov	r1, r4
 8002386:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800238a:	4621      	mov	r1, r4
 800238c:	024a      	lsls	r2, r1, #9
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002396:	2200      	movs	r2, #0
 8002398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800239c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80023a4:	f7fe fb1c 	bl	80009e0 <__aeabi_uldivmod>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4613      	mov	r3, r2
 80023ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023b2:	e067      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b4:	4b75      	ldr	r3, [pc, #468]	; (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	2200      	movs	r2, #0
 80023bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023c0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80023c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80023ce:	2300      	movs	r3, #0
 80023d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80023d6:	4622      	mov	r2, r4
 80023d8:	462b      	mov	r3, r5
 80023da:	f04f 0000 	mov.w	r0, #0
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	0159      	lsls	r1, r3, #5
 80023e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e8:	0150      	lsls	r0, r2, #5
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4621      	mov	r1, r4
 80023f0:	1a51      	subs	r1, r2, r1
 80023f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80023f4:	4629      	mov	r1, r5
 80023f6:	eb63 0301 	sbc.w	r3, r3, r1
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002408:	4649      	mov	r1, r9
 800240a:	018b      	lsls	r3, r1, #6
 800240c:	4641      	mov	r1, r8
 800240e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002412:	4641      	mov	r1, r8
 8002414:	018a      	lsls	r2, r1, #6
 8002416:	4641      	mov	r1, r8
 8002418:	ebb2 0a01 	subs.w	sl, r2, r1
 800241c:	4649      	mov	r1, r9
 800241e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800242e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002432:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002436:	4692      	mov	sl, r2
 8002438:	469b      	mov	fp, r3
 800243a:	4623      	mov	r3, r4
 800243c:	eb1a 0303 	adds.w	r3, sl, r3
 8002440:	623b      	str	r3, [r7, #32]
 8002442:	462b      	mov	r3, r5
 8002444:	eb4b 0303 	adc.w	r3, fp, r3
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002456:	4629      	mov	r1, r5
 8002458:	028b      	lsls	r3, r1, #10
 800245a:	4621      	mov	r1, r4
 800245c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002460:	4621      	mov	r1, r4
 8002462:	028a      	lsls	r2, r1, #10
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800246c:	2200      	movs	r2, #0
 800246e:	673b      	str	r3, [r7, #112]	; 0x70
 8002470:	677a      	str	r2, [r7, #116]	; 0x74
 8002472:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002476:	f7fe fab3 	bl	80009e0 <__aeabi_uldivmod>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4613      	mov	r3, r2
 8002480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002484:	4b41      	ldr	r3, [pc, #260]	; (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	3301      	adds	r3, #1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800249a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024a6:	e0eb      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a8:	4b38      	ldr	r3, [pc, #224]	; (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b4:	4b35      	ldr	r3, [pc, #212]	; (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d06b      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c0:	4b32      	ldr	r3, [pc, #200]	; (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	2200      	movs	r2, #0
 80024c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80024ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d2:	663b      	str	r3, [r7, #96]	; 0x60
 80024d4:	2300      	movs	r3, #0
 80024d6:	667b      	str	r3, [r7, #100]	; 0x64
 80024d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80024dc:	4622      	mov	r2, r4
 80024de:	462b      	mov	r3, r5
 80024e0:	f04f 0000 	mov.w	r0, #0
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	0159      	lsls	r1, r3, #5
 80024ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ee:	0150      	lsls	r0, r2, #5
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4621      	mov	r1, r4
 80024f6:	1a51      	subs	r1, r2, r1
 80024f8:	61b9      	str	r1, [r7, #24]
 80024fa:	4629      	mov	r1, r5
 80024fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800250e:	4659      	mov	r1, fp
 8002510:	018b      	lsls	r3, r1, #6
 8002512:	4651      	mov	r1, sl
 8002514:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002518:	4651      	mov	r1, sl
 800251a:	018a      	lsls	r2, r1, #6
 800251c:	4651      	mov	r1, sl
 800251e:	ebb2 0801 	subs.w	r8, r2, r1
 8002522:	4659      	mov	r1, fp
 8002524:	eb63 0901 	sbc.w	r9, r3, r1
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002534:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002538:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800253c:	4690      	mov	r8, r2
 800253e:	4699      	mov	r9, r3
 8002540:	4623      	mov	r3, r4
 8002542:	eb18 0303 	adds.w	r3, r8, r3
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	462b      	mov	r3, r5
 800254a:	eb49 0303 	adc.w	r3, r9, r3
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800255c:	4629      	mov	r1, r5
 800255e:	024b      	lsls	r3, r1, #9
 8002560:	4621      	mov	r1, r4
 8002562:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002566:	4621      	mov	r1, r4
 8002568:	024a      	lsls	r2, r1, #9
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002572:	2200      	movs	r2, #0
 8002574:	65bb      	str	r3, [r7, #88]	; 0x58
 8002576:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002578:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800257c:	f7fe fa30 	bl	80009e0 <__aeabi_uldivmod>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4613      	mov	r3, r2
 8002586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800258a:	e065      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x420>
 800258c:	40023800 	.word	0x40023800
 8002590:	00f42400 	.word	0x00f42400
 8002594:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002598:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_GetSysClockFreq+0x458>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	099b      	lsrs	r3, r3, #6
 800259e:	2200      	movs	r2, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	4611      	mov	r1, r2
 80025a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025a8:	653b      	str	r3, [r7, #80]	; 0x50
 80025aa:	2300      	movs	r3, #0
 80025ac:	657b      	str	r3, [r7, #84]	; 0x54
 80025ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	f04f 0000 	mov.w	r0, #0
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	0159      	lsls	r1, r3, #5
 80025c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c4:	0150      	lsls	r0, r2, #5
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4641      	mov	r1, r8
 80025cc:	1a51      	subs	r1, r2, r1
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	4649      	mov	r1, r9
 80025d2:	eb63 0301 	sbc.w	r3, r3, r1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025e4:	4659      	mov	r1, fp
 80025e6:	018b      	lsls	r3, r1, #6
 80025e8:	4651      	mov	r1, sl
 80025ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ee:	4651      	mov	r1, sl
 80025f0:	018a      	lsls	r2, r1, #6
 80025f2:	4651      	mov	r1, sl
 80025f4:	1a54      	subs	r4, r2, r1
 80025f6:	4659      	mov	r1, fp
 80025f8:	eb63 0501 	sbc.w	r5, r3, r1
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	00eb      	lsls	r3, r5, #3
 8002606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260a:	00e2      	lsls	r2, r4, #3
 800260c:	4614      	mov	r4, r2
 800260e:	461d      	mov	r5, r3
 8002610:	4643      	mov	r3, r8
 8002612:	18e3      	adds	r3, r4, r3
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	464b      	mov	r3, r9
 8002618:	eb45 0303 	adc.w	r3, r5, r3
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262a:	4629      	mov	r1, r5
 800262c:	028b      	lsls	r3, r1, #10
 800262e:	4621      	mov	r1, r4
 8002630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002634:	4621      	mov	r1, r4
 8002636:	028a      	lsls	r2, r1, #10
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002640:	2200      	movs	r2, #0
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48
 8002644:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002646:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800264a:	f7fe f9c9 	bl	80009e0 <__aeabi_uldivmod>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4613      	mov	r3, r2
 8002654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_RCC_GetSysClockFreq+0x458>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0f1b      	lsrs	r3, r3, #28
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800266a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002676:	e003      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_GetSysClockFreq+0x45c>)
 800267a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800267e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002680:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002684:	4618      	mov	r0, r3
 8002686:	37b8      	adds	r7, #184	; 0xb8
 8002688:	46bd      	mov	sp, r7
 800268a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	00f42400 	.word	0x00f42400

08002698 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e28d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8083 	beq.w	80027be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026b8:	4b94      	ldr	r3, [pc, #592]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d019      	beq.n	80026f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026c4:	4b91      	ldr	r3, [pc, #580]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026d0:	4b8e      	ldr	r3, [pc, #568]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026dc:	d00c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b8b      	ldr	r3, [pc, #556]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d112      	bne.n	8002710 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ea:	4b88      	ldr	r3, [pc, #544]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b84      	ldr	r3, [pc, #528]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <HAL_RCC_OscConfig+0x124>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d157      	bne.n	80027bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e25a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x90>
 800271a:	4b7c      	ldr	r3, [pc, #496]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a7b      	ldr	r2, [pc, #492]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xcc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0xb4>
 8002732:	4b76      	ldr	r3, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a75      	ldr	r2, [pc, #468]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b73      	ldr	r3, [pc, #460]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a72      	ldr	r2, [pc, #456]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xcc>
 800274c:	4b6f      	ldr	r3, [pc, #444]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6e      	ldr	r2, [pc, #440]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b6c      	ldr	r3, [pc, #432]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a6b      	ldr	r2, [pc, #428]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7ff f964 	bl	8001a38 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f960 	bl	8001a38 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e21f      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xdc>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff f950 	bl	8001a38 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff f94c 	bl	8001a38 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e20b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b57      	ldr	r3, [pc, #348]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x104>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06f      	beq.n	80028aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027ca:	4b50      	ldr	r3, [pc, #320]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d017      	beq.n	8002806 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027d6:	4b4d      	ldr	r3, [pc, #308]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027e2:	4b4a      	ldr	r3, [pc, #296]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d11c      	bne.n	8002834 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fa:	4b44      	ldr	r3, [pc, #272]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d116      	bne.n	8002834 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x186>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e1d3      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4937      	ldr	r1, [pc, #220]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	e03a      	b.n	80028aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283c:	4b34      	ldr	r3, [pc, #208]	; (8002910 <HAL_RCC_OscConfig+0x278>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7ff f8f9 	bl	8001a38 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284a:	f7ff f8f5 	bl	8001a38 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1b4      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4925      	ldr	r1, [pc, #148]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287e:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCC_OscConfig+0x278>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7ff f8d8 	bl	8001a38 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288c:	f7ff f8d4 	bl	8001a38 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e193      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d036      	beq.n	8002924 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCC_OscConfig+0x27c>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7ff f8b8 	bl	8001a38 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028cc:	f7ff f8b4 	bl	8001a38 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e173      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80028e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x234>
 80028ea:	e01b      	b.n	8002924 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_OscConfig+0x27c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7ff f8a1 	bl	8001a38 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	e00e      	b.n	8002918 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fa:	f7ff f89d 	bl	8001a38 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d907      	bls.n	8002918 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e15c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
 800290c:	40023800 	.word	0x40023800
 8002910:	42470000 	.word	0x42470000
 8002914:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	4b8a      	ldr	r3, [pc, #552]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ea      	bne.n	80028fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8097 	beq.w	8002a60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002936:	4b83      	ldr	r3, [pc, #524]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	4b7f      	ldr	r3, [pc, #508]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a7e      	ldr	r2, [pc, #504]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b7c      	ldr	r3, [pc, #496]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4b79      	ldr	r3, [pc, #484]	; (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d118      	bne.n	80029a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	; (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7ff f85d 	bl	8001a38 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7ff f859 	bl	8001a38 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e118      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x31e>
 80029a8:	4b66      	ldr	r3, [pc, #408]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a65      	ldr	r2, [pc, #404]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	e01c      	b.n	80029f0 <HAL_RCC_OscConfig+0x358>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x340>
 80029be:	4b61      	ldr	r3, [pc, #388]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a60      	ldr	r2, [pc, #384]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	4b5e      	ldr	r3, [pc, #376]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a5d      	ldr	r2, [pc, #372]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0x358>
 80029d8:	4b5a      	ldr	r3, [pc, #360]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a59      	ldr	r2, [pc, #356]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
 80029e4:	4b57      	ldr	r3, [pc, #348]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	4a56      	ldr	r2, [pc, #344]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029ea:	f023 0304 	bic.w	r3, r3, #4
 80029ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7ff f81e 	bl	8001a38 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7ff f81a 	bl	8001a38 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0d7      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a16:	4b4b      	ldr	r3, [pc, #300]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0ee      	beq.n	8002a00 <HAL_RCC_OscConfig+0x368>
 8002a22:	e014      	b.n	8002a4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7ff f808 	bl	8001a38 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f7ff f804 	bl	8001a38 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0c1      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a42:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1ee      	bne.n	8002a2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80ad 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d060      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d145      	bne.n	8002b0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b33      	ldr	r3, [pc, #204]	; (8002b4c <HAL_RCC_OscConfig+0x4b4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe ffd8 	bl	8001a38 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe ffd4 	bl	8001a38 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e093      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	071b      	lsls	r3, r3, #28
 8002ad6:	491b      	ldr	r1, [pc, #108]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x4b4>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe ffa9 	bl	8001a38 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe ffa5 	bl	8001a38 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e064      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x452>
 8002b08:	e05c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_RCC_OscConfig+0x4b4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe ff92 	bl	8001a38 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe ff8e 	bl	8001a38 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e04d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x480>
 8002b36:	e045      	b.n	8002bc4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e040      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b50:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <HAL_RCC_OscConfig+0x538>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d030      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d129      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d122      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d119      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10f      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e041      	b.n	8002c6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fd1e 	bl	800163c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	f000 fb9e 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d001      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e04e      	b.n	8002d2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <HAL_TIM_Base_Start_IT+0xc4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d022      	beq.n	8002cf4 <HAL_TIM_Base_Start_IT+0x80>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d01d      	beq.n	8002cf4 <HAL_TIM_Base_Start_IT+0x80>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1f      	ldr	r2, [pc, #124]	; (8002d3c <HAL_TIM_Base_Start_IT+0xc8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d018      	beq.n	8002cf4 <HAL_TIM_Base_Start_IT+0x80>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d013      	beq.n	8002cf4 <HAL_TIM_Base_Start_IT+0x80>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_TIM_Base_Start_IT+0x80>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_TIM_Base_Start_IT+0xd4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_TIM_Base_Start_IT+0x80>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_TIM_Base_Start_IT+0x80>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_TIM_Base_Start_IT+0xdc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d111      	bne.n	8002d18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d010      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d16:	e007      	b.n	8002d28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	40010400 	.word	0x40010400
 8002d4c:	40014000 	.word	0x40014000
 8002d50:	40001800 	.word	0x40001800

08002d54 <HAL_TIM_STEP_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_STEP_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d122      	bne.n	8002db0 <HAL_TIM_STEP_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d11b      	bne.n	8002db0 <HAL_TIM_STEP_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0202 	mvn.w	r2, #2
 8002d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_STEP_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fabd 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_STEP_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 faaf 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fac0 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d122      	bne.n	8002e04 <HAL_TIM_STEP_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d11b      	bne.n	8002e04 <HAL_TIM_STEP_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0204 	mvn.w	r2, #4
 8002dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_STEP_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa93 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_STEP_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fa85 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fa96 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_STEP_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_STEP_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0208 	mvn.w	r2, #8
 8002e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_STEP_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa69 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_STEP_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fa5b 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fa6c 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_STEP_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_STEP_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0210 	mvn.w	r2, #16
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2208      	movs	r2, #8
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_STEP_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fa3f 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_STEP_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa31 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fa42 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_TIM_STEP_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_TIM_STEP_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0201 	mvn.w	r2, #1
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_STEP_PeriodElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fa7a 	bl	80013cc <HAL_TIM_STEP_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_STEP_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef0:	2b80      	cmp	r3, #128	; 0x80
 8002ef2:	d107      	bne.n	8002f04 <HAL_TIM_STEP_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fbe8 	bl	80036d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d10e      	bne.n	8002f30 <HAL_TIM_STEP_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d107      	bne.n	8002f30 <HAL_TIM_STEP_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa07 	bl	800333e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d10e      	bne.n	8002f5c <HAL_TIM_STEP_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d107      	bne.n	8002f5c <HAL_TIM_STEP_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0220 	mvn.w	r2, #32
 8002f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fbb2 	bl	80036c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_INT_IRQHandler>:



void HAL_TIM_INT_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d122      	bne.n	8002fc0 <HAL_TIM_INT_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d11b      	bne.n	8002fc0 <HAL_TIM_INT_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0202 	mvn.w	r2, #2
 8002f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_INT_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f9b5 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_INT_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f9a7 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f9b8 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d122      	bne.n	8003014 <HAL_TIM_INT_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d11b      	bne.n	8003014 <HAL_TIM_INT_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0204 	mvn.w	r2, #4
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_INT_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f98b 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_INT_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f97d 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f98e 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b08      	cmp	r3, #8
 8003020:	d122      	bne.n	8003068 <HAL_TIM_INT_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b08      	cmp	r3, #8
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_INT_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0208 	mvn.w	r2, #8
 8003038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2204      	movs	r2, #4
 800303e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_INT_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f961 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_INT_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f953 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f964 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b10      	cmp	r3, #16
 8003074:	d122      	bne.n	80030bc <HAL_TIM_INT_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b10      	cmp	r3, #16
 8003082:	d11b      	bne.n	80030bc <HAL_TIM_INT_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0210 	mvn.w	r2, #16
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2208      	movs	r2, #8
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_INT_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f937 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_INT_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f929 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f93a 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d10e      	bne.n	80030e8 <HAL_TIM_INT_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_TIM_INT_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0201 	mvn.w	r2, #1
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_INT_PeriodElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe f986 	bl	80013f4 <HAL_TIM_INT_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b80      	cmp	r3, #128	; 0x80
 80030f4:	d10e      	bne.n	8003114 <HAL_TIM_INT_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003100:	2b80      	cmp	r3, #128	; 0x80
 8003102:	d107      	bne.n	8003114 <HAL_TIM_INT_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fae0 	bl	80036d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311e:	2b40      	cmp	r3, #64	; 0x40
 8003120:	d10e      	bne.n	8003140 <HAL_TIM_INT_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d107      	bne.n	8003140 <HAL_TIM_INT_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8ff 	bl	800333e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b20      	cmp	r3, #32
 800314c:	d10e      	bne.n	800316c <HAL_TIM_INT_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b20      	cmp	r3, #32
 800315a:	d107      	bne.n	800316c <HAL_TIM_INT_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0220 	mvn.w	r2, #32
 8003164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 faaa 	bl	80036c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_TIM_ConfigClockSource+0x1c>
 800318c:	2302      	movs	r3, #2
 800318e:	e0b4      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x186>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c8:	d03e      	beq.n	8003248 <HAL_TIM_ConfigClockSource+0xd4>
 80031ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ce:	f200 8087 	bhi.w	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d6:	f000 8086 	beq.w	80032e6 <HAL_TIM_ConfigClockSource+0x172>
 80031da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031de:	d87f      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e0:	2b70      	cmp	r3, #112	; 0x70
 80031e2:	d01a      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xa6>
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d87b      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e8:	2b60      	cmp	r3, #96	; 0x60
 80031ea:	d050      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x11a>
 80031ec:	2b60      	cmp	r3, #96	; 0x60
 80031ee:	d877      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	2b50      	cmp	r3, #80	; 0x50
 80031f2:	d03c      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xfa>
 80031f4:	2b50      	cmp	r3, #80	; 0x50
 80031f6:	d873      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d058      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x13a>
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d86f      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003200:	2b30      	cmp	r3, #48	; 0x30
 8003202:	d064      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15a>
 8003204:	2b30      	cmp	r3, #48	; 0x30
 8003206:	d86b      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	2b20      	cmp	r3, #32
 800320a:	d060      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15a>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d867      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d05c      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15a>
 8003214:	2b10      	cmp	r3, #16
 8003216:	d05a      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15a>
 8003218:	e062      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f000 f9ad 	bl	8003588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800323c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	609a      	str	r2, [r3, #8]
      break;
 8003246:	e04f      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f000 f996 	bl	8003588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326a:	609a      	str	r2, [r3, #8]
      break;
 800326c:	e03c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	461a      	mov	r2, r3
 800327c:	f000 f90a 	bl	8003494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2150      	movs	r1, #80	; 0x50
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f963 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 800328c:	e02c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	461a      	mov	r2, r3
 800329c:	f000 f929 	bl	80034f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2160      	movs	r1, #96	; 0x60
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f953 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 80032ac:	e01c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f000 f8ea 	bl	8003494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2140      	movs	r1, #64	; 0x40
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f943 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 80032cc:	e00c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4619      	mov	r1, r3
 80032d8:	4610      	mov	r0, r2
 80032da:	f000 f93a 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 80032de:	e003      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      break;
 80032e4:	e000      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a40      	ldr	r2, [pc, #256]	; (8003468 <TIM_Base_SetConfig+0x114>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d013      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003372:	d00f      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a3d      	ldr	r2, [pc, #244]	; (800346c <TIM_Base_SetConfig+0x118>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00b      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3c      	ldr	r2, [pc, #240]	; (8003470 <TIM_Base_SetConfig+0x11c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d007      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3b      	ldr	r2, [pc, #236]	; (8003474 <TIM_Base_SetConfig+0x120>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d003      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3a      	ldr	r2, [pc, #232]	; (8003478 <TIM_Base_SetConfig+0x124>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d108      	bne.n	80033a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2f      	ldr	r2, [pc, #188]	; (8003468 <TIM_Base_SetConfig+0x114>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02b      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b4:	d027      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2c      	ldr	r2, [pc, #176]	; (800346c <TIM_Base_SetConfig+0x118>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d023      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <TIM_Base_SetConfig+0x11c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01f      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2a      	ldr	r2, [pc, #168]	; (8003474 <TIM_Base_SetConfig+0x120>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01b      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a29      	ldr	r2, [pc, #164]	; (8003478 <TIM_Base_SetConfig+0x124>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d017      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a28      	ldr	r2, [pc, #160]	; (800347c <TIM_Base_SetConfig+0x128>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a27      	ldr	r2, [pc, #156]	; (8003480 <TIM_Base_SetConfig+0x12c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00f      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a26      	ldr	r2, [pc, #152]	; (8003484 <TIM_Base_SetConfig+0x130>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00b      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a25      	ldr	r2, [pc, #148]	; (8003488 <TIM_Base_SetConfig+0x134>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a24      	ldr	r2, [pc, #144]	; (800348c <TIM_Base_SetConfig+0x138>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d003      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a23      	ldr	r2, [pc, #140]	; (8003490 <TIM_Base_SetConfig+0x13c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d108      	bne.n	8003418 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <TIM_Base_SetConfig+0x114>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_Base_SetConfig+0xf8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <TIM_Base_SetConfig+0x124>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d103      	bne.n	8003454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	615a      	str	r2, [r3, #20]
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40010000 	.word	0x40010000
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800
 8003474:	40000c00 	.word	0x40000c00
 8003478:	40010400 	.word	0x40010400
 800347c:	40014000 	.word	0x40014000
 8003480:	40014400 	.word	0x40014400
 8003484:	40014800 	.word	0x40014800
 8003488:	40001800 	.word	0x40001800
 800348c:	40001c00 	.word	0x40001c00
 8003490:	40002000 	.word	0x40002000

08003494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f023 030a 	bic.w	r3, r3, #10
 80034d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b087      	sub	sp, #28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f023 0210 	bic.w	r2, r3, #16
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800351c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	031b      	lsls	r3, r3, #12
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800352e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	621a      	str	r2, [r3, #32]
}
 8003546:	bf00      	nop
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	f043 0307 	orr.w	r3, r3, #7
 8003574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	021a      	lsls	r2, r3, #8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035dc:	2302      	movs	r3, #2
 80035de:	e05a      	b.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d022      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362c:	d01d      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a15      	ldr	r2, [pc, #84]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10c      	bne.n	8003684 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4313      	orrs	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40010000 	.word	0x40010000
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40000800 	.word	0x40000800
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	40010400 	.word	0x40010400
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40001800 	.word	0x40001800

080036c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e03f      	b.n	800377a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd ffee 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f9cb 	bl	8003ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b08a      	sub	sp, #40	; 0x28
 8003786:	af02      	add	r7, sp, #8
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d17c      	bne.n	800389c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_UART_Transmit+0x2c>
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e075      	b.n	800389e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_UART_Transmit+0x3e>
 80037bc:	2302      	movs	r3, #2
 80037be:	e06e      	b.n	800389e <HAL_UART_Transmit+0x11c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2221      	movs	r2, #33	; 0x21
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d6:	f7fe f92f 	bl	8001a38 <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f0:	d108      	bne.n	8003804 <HAL_UART_Transmit+0x82>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	e003      	b.n	800380c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003814:	e02a      	b.n	800386c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f8e2 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e036      	b.n	800389e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	3302      	adds	r3, #2
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	e007      	b.n	800385e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	3301      	adds	r3, #1
 800385c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1cf      	bne.n	8003816 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	2140      	movs	r1, #64	; 0x40
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f8b2 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e006      	b.n	800389e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800389c:	2302      	movs	r3, #2
  }
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08a      	sub	sp, #40	; 0x28
 80038aa:	af02      	add	r7, sp, #8
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	f040 808c 	bne.w	80039e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_UART_Receive+0x2e>
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e084      	b.n	80039e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_UART_Receive+0x40>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e07d      	b.n	80039e2 <HAL_UART_Receive+0x13c>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2222      	movs	r2, #34	; 0x22
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003902:	f7fe f899 	bl	8001a38 <HAL_GetTick>
 8003906:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d108      	bne.n	8003930 <HAL_UART_Receive+0x8a>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d104      	bne.n	8003930 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	e003      	b.n	8003938 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003940:	e043      	b.n	80039ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	2120      	movs	r1, #32
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f84c 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e042      	b.n	80039e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396e:	b29a      	uxth	r2, r3
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	3302      	adds	r3, #2
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	e01f      	b.n	80039bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003984:	d007      	beq.n	8003996 <HAL_UART_Receive+0xf0>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <HAL_UART_Receive+0xfe>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e008      	b.n	80039b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3301      	adds	r3, #1
 80039ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1b6      	bne.n	8003942 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b090      	sub	sp, #64	; 0x40
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	4613      	mov	r3, r2
 80039f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fa:	e050      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d04c      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a0a:	f7fe f815 	bl	8001a38 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d241      	bcs.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	330c      	adds	r3, #12
 8003a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a3a:	637a      	str	r2, [r7, #52]	; 0x34
 8003a3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e5      	bne.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3314      	adds	r3, #20
 8003a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3314      	adds	r3, #20
 8003a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a6e:	623a      	str	r2, [r7, #32]
 8003a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	69f9      	ldr	r1, [r7, #28]
 8003a74:	6a3a      	ldr	r2, [r7, #32]
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e5      	bne.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e00f      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d09f      	beq.n	80039fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3740      	adds	r7, #64	; 0x40
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003acc:	b0c0      	sub	sp, #256	; 0x100
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	68d9      	ldr	r1, [r3, #12]
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	ea40 0301 	orr.w	r3, r0, r1
 8003af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b20:	f021 010c 	bic.w	r1, r1, #12
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	6999      	ldr	r1, [r3, #24]
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	ea40 0301 	orr.w	r3, r0, r1
 8003b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b8f      	ldr	r3, [pc, #572]	; (8003d94 <UART_SetConfig+0x2cc>)
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d005      	beq.n	8003b68 <UART_SetConfig+0xa0>
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b8d      	ldr	r3, [pc, #564]	; (8003d98 <UART_SetConfig+0x2d0>)
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d104      	bne.n	8003b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b68:	f7fe fb52 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8003b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b70:	e003      	b.n	8003b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b72:	f7fe fb39 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 8003b76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b84:	f040 810c 	bne.w	8003da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	1891      	adds	r1, r2, r2
 8003ba0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ba2:	415b      	adcs	r3, r3
 8003ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003baa:	4621      	mov	r1, r4
 8003bac:	eb12 0801 	adds.w	r8, r2, r1
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	eb43 0901 	adc.w	r9, r3, r1
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bca:	4690      	mov	r8, r2
 8003bcc:	4699      	mov	r9, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	eb18 0303 	adds.w	r3, r8, r3
 8003bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bd8:	462b      	mov	r3, r5
 8003bda:	eb49 0303 	adc.w	r3, r9, r3
 8003bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	18db      	adds	r3, r3, r3
 8003bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	eb42 0303 	adc.w	r3, r2, r3
 8003c02:	657b      	str	r3, [r7, #84]	; 0x54
 8003c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c0c:	f7fc fee8 	bl	80009e0 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4b61      	ldr	r3, [pc, #388]	; (8003d9c <UART_SetConfig+0x2d4>)
 8003c16:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	011c      	lsls	r4, r3, #4
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c40:	4641      	mov	r1, r8
 8003c42:	eb12 0a01 	adds.w	sl, r2, r1
 8003c46:	4649      	mov	r1, r9
 8003c48:	eb43 0b01 	adc.w	fp, r3, r1
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c60:	4692      	mov	sl, r2
 8003c62:	469b      	mov	fp, r3
 8003c64:	4643      	mov	r3, r8
 8003c66:	eb1a 0303 	adds.w	r3, sl, r3
 8003c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	eb4b 0303 	adc.w	r3, fp, r3
 8003c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	18db      	adds	r3, r3, r3
 8003c90:	643b      	str	r3, [r7, #64]	; 0x40
 8003c92:	4613      	mov	r3, r2
 8003c94:	eb42 0303 	adc.w	r3, r2, r3
 8003c98:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ca2:	f7fc fe9d 	bl	80009e0 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <UART_SetConfig+0x2d4>)
 8003cae:	fba3 2301 	umull	r2, r3, r3, r1
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2264      	movs	r2, #100	; 0x64
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	1acb      	subs	r3, r1, r3
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cc2:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <UART_SetConfig+0x2d4>)
 8003cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cd0:	441c      	add	r4, r3
 8003cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	1891      	adds	r1, r2, r2
 8003cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cec:	415b      	adcs	r3, r3
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	1851      	adds	r1, r2, r1
 8003cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	414b      	adcs	r3, r1
 8003cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d0c:	4659      	mov	r1, fp
 8003d0e:	00cb      	lsls	r3, r1, #3
 8003d10:	4651      	mov	r1, sl
 8003d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d16:	4651      	mov	r1, sl
 8003d18:	00ca      	lsls	r2, r1, #3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4642      	mov	r2, r8
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d28:	464b      	mov	r3, r9
 8003d2a:	460a      	mov	r2, r1
 8003d2c:	eb42 0303 	adc.w	r3, r2, r3
 8003d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d48:	460b      	mov	r3, r1
 8003d4a:	18db      	adds	r3, r3, r3
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4e:	4613      	mov	r3, r2
 8003d50:	eb42 0303 	adc.w	r3, r2, r3
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d5e:	f7fc fe3f 	bl	80009e0 <__aeabi_uldivmod>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <UART_SetConfig+0x2d4>)
 8003d68:	fba3 1302 	umull	r1, r3, r3, r2
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	2164      	movs	r1, #100	; 0x64
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	3332      	adds	r3, #50	; 0x32
 8003d7a:	4a08      	ldr	r2, [pc, #32]	; (8003d9c <UART_SetConfig+0x2d4>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	f003 0207 	and.w	r2, r3, #7
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4422      	add	r2, r4
 8003d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d90:	e105      	b.n	8003f9e <UART_SetConfig+0x4d6>
 8003d92:	bf00      	nop
 8003d94:	40011000 	.word	0x40011000
 8003d98:	40011400 	.word	0x40011400
 8003d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da4:	2200      	movs	r2, #0
 8003da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003daa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003db2:	4642      	mov	r2, r8
 8003db4:	464b      	mov	r3, r9
 8003db6:	1891      	adds	r1, r2, r2
 8003db8:	6239      	str	r1, [r7, #32]
 8003dba:	415b      	adcs	r3, r3
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	1854      	adds	r4, r2, r1
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	eb43 0501 	adc.w	r5, r3, r1
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	00eb      	lsls	r3, r5, #3
 8003dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dda:	00e2      	lsls	r2, r4, #3
 8003ddc:	4614      	mov	r4, r2
 8003dde:	461d      	mov	r5, r3
 8003de0:	4643      	mov	r3, r8
 8003de2:	18e3      	adds	r3, r4, r3
 8003de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003de8:	464b      	mov	r3, r9
 8003dea:	eb45 0303 	adc.w	r3, r5, r3
 8003dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e0e:	4629      	mov	r1, r5
 8003e10:	008b      	lsls	r3, r1, #2
 8003e12:	4621      	mov	r1, r4
 8003e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e18:	4621      	mov	r1, r4
 8003e1a:	008a      	lsls	r2, r1, #2
 8003e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e20:	f7fc fdde 	bl	80009e0 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4b60      	ldr	r3, [pc, #384]	; (8003fac <UART_SetConfig+0x4e4>)
 8003e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	011c      	lsls	r4, r3, #4
 8003e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e44:	4642      	mov	r2, r8
 8003e46:	464b      	mov	r3, r9
 8003e48:	1891      	adds	r1, r2, r2
 8003e4a:	61b9      	str	r1, [r7, #24]
 8003e4c:	415b      	adcs	r3, r3
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e54:	4641      	mov	r1, r8
 8003e56:	1851      	adds	r1, r2, r1
 8003e58:	6139      	str	r1, [r7, #16]
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	414b      	adcs	r3, r1
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e6c:	4659      	mov	r1, fp
 8003e6e:	00cb      	lsls	r3, r1, #3
 8003e70:	4651      	mov	r1, sl
 8003e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e76:	4651      	mov	r1, sl
 8003e78:	00ca      	lsls	r2, r1, #3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4642      	mov	r2, r8
 8003e82:	189b      	adds	r3, r3, r2
 8003e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e88:	464b      	mov	r3, r9
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	eb42 0303 	adc.w	r3, r2, r3
 8003e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003eac:	4649      	mov	r1, r9
 8003eae:	008b      	lsls	r3, r1, #2
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	008a      	lsls	r2, r1, #2
 8003eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ebe:	f7fc fd8f 	bl	80009e0 <__aeabi_uldivmod>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <UART_SetConfig+0x4e4>)
 8003ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	2164      	movs	r1, #100	; 0x64
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	3332      	adds	r3, #50	; 0x32
 8003eda:	4a34      	ldr	r2, [pc, #208]	; (8003fac <UART_SetConfig+0x4e4>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee6:	441c      	add	r4, r3
 8003ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eec:	2200      	movs	r2, #0
 8003eee:	673b      	str	r3, [r7, #112]	; 0x70
 8003ef0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ef2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ef6:	4642      	mov	r2, r8
 8003ef8:	464b      	mov	r3, r9
 8003efa:	1891      	adds	r1, r2, r2
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	415b      	adcs	r3, r3
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f06:	4641      	mov	r1, r8
 8003f08:	1851      	adds	r1, r2, r1
 8003f0a:	6039      	str	r1, [r7, #0]
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	414b      	adcs	r3, r1
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f1e:	4659      	mov	r1, fp
 8003f20:	00cb      	lsls	r3, r1, #3
 8003f22:	4651      	mov	r1, sl
 8003f24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f28:	4651      	mov	r1, sl
 8003f2a:	00ca      	lsls	r2, r1, #3
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4603      	mov	r3, r0
 8003f32:	4642      	mov	r2, r8
 8003f34:	189b      	adds	r3, r3, r2
 8003f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f38:	464b      	mov	r3, r9
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	eb42 0303 	adc.w	r3, r2, r3
 8003f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f4c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	008b      	lsls	r3, r1, #2
 8003f5e:	4641      	mov	r1, r8
 8003f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f64:	4641      	mov	r1, r8
 8003f66:	008a      	lsls	r2, r1, #2
 8003f68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f6c:	f7fc fd38 	bl	80009e0 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <UART_SetConfig+0x4e4>)
 8003f76:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2164      	movs	r1, #100	; 0x64
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	3332      	adds	r3, #50	; 0x32
 8003f88:	4a08      	ldr	r2, [pc, #32]	; (8003fac <UART_SetConfig+0x4e4>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	f003 020f 	and.w	r2, r3, #15
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4422      	add	r2, r4
 8003f9c:	609a      	str	r2, [r3, #8]
}
 8003f9e:	bf00      	nop
 8003fa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003faa:	bf00      	nop
 8003fac:	51eb851f 	.word	0x51eb851f

08003fb0 <__errno>:
 8003fb0:	4b01      	ldr	r3, [pc, #4]	; (8003fb8 <__errno+0x8>)
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	2000000c 	.word	0x2000000c

08003fbc <__libc_init_array>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	4d0d      	ldr	r5, [pc, #52]	; (8003ff4 <__libc_init_array+0x38>)
 8003fc0:	4c0d      	ldr	r4, [pc, #52]	; (8003ff8 <__libc_init_array+0x3c>)
 8003fc2:	1b64      	subs	r4, r4, r5
 8003fc4:	10a4      	asrs	r4, r4, #2
 8003fc6:	2600      	movs	r6, #0
 8003fc8:	42a6      	cmp	r6, r4
 8003fca:	d109      	bne.n	8003fe0 <__libc_init_array+0x24>
 8003fcc:	4d0b      	ldr	r5, [pc, #44]	; (8003ffc <__libc_init_array+0x40>)
 8003fce:	4c0c      	ldr	r4, [pc, #48]	; (8004000 <__libc_init_array+0x44>)
 8003fd0:	f000 fc66 	bl	80048a0 <_init>
 8003fd4:	1b64      	subs	r4, r4, r5
 8003fd6:	10a4      	asrs	r4, r4, #2
 8003fd8:	2600      	movs	r6, #0
 8003fda:	42a6      	cmp	r6, r4
 8003fdc:	d105      	bne.n	8003fea <__libc_init_array+0x2e>
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
 8003fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe4:	4798      	blx	r3
 8003fe6:	3601      	adds	r6, #1
 8003fe8:	e7ee      	b.n	8003fc8 <__libc_init_array+0xc>
 8003fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fee:	4798      	blx	r3
 8003ff0:	3601      	adds	r6, #1
 8003ff2:	e7f2      	b.n	8003fda <__libc_init_array+0x1e>
 8003ff4:	0800493c 	.word	0x0800493c
 8003ff8:	0800493c 	.word	0x0800493c
 8003ffc:	0800493c 	.word	0x0800493c
 8004000:	08004940 	.word	0x08004940

08004004 <memset>:
 8004004:	4402      	add	r2, r0
 8004006:	4603      	mov	r3, r0
 8004008:	4293      	cmp	r3, r2
 800400a:	d100      	bne.n	800400e <memset+0xa>
 800400c:	4770      	bx	lr
 800400e:	f803 1b01 	strb.w	r1, [r3], #1
 8004012:	e7f9      	b.n	8004008 <memset+0x4>

08004014 <setvbuf>:
 8004014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004018:	461d      	mov	r5, r3
 800401a:	4b5d      	ldr	r3, [pc, #372]	; (8004190 <setvbuf+0x17c>)
 800401c:	681f      	ldr	r7, [r3, #0]
 800401e:	4604      	mov	r4, r0
 8004020:	460e      	mov	r6, r1
 8004022:	4690      	mov	r8, r2
 8004024:	b127      	cbz	r7, 8004030 <setvbuf+0x1c>
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	b913      	cbnz	r3, 8004030 <setvbuf+0x1c>
 800402a:	4638      	mov	r0, r7
 800402c:	f000 f9d2 	bl	80043d4 <__sinit>
 8004030:	4b58      	ldr	r3, [pc, #352]	; (8004194 <setvbuf+0x180>)
 8004032:	429c      	cmp	r4, r3
 8004034:	d167      	bne.n	8004106 <setvbuf+0xf2>
 8004036:	687c      	ldr	r4, [r7, #4]
 8004038:	f1b8 0f02 	cmp.w	r8, #2
 800403c:	d006      	beq.n	800404c <setvbuf+0x38>
 800403e:	f1b8 0f01 	cmp.w	r8, #1
 8004042:	f200 809f 	bhi.w	8004184 <setvbuf+0x170>
 8004046:	2d00      	cmp	r5, #0
 8004048:	f2c0 809c 	blt.w	8004184 <setvbuf+0x170>
 800404c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800404e:	07db      	lsls	r3, r3, #31
 8004050:	d405      	bmi.n	800405e <setvbuf+0x4a>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	0598      	lsls	r0, r3, #22
 8004056:	d402      	bmi.n	800405e <setvbuf+0x4a>
 8004058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800405a:	f000 fa59 	bl	8004510 <__retarget_lock_acquire_recursive>
 800405e:	4621      	mov	r1, r4
 8004060:	4638      	mov	r0, r7
 8004062:	f000 f923 	bl	80042ac <_fflush_r>
 8004066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004068:	b141      	cbz	r1, 800407c <setvbuf+0x68>
 800406a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800406e:	4299      	cmp	r1, r3
 8004070:	d002      	beq.n	8004078 <setvbuf+0x64>
 8004072:	4638      	mov	r0, r7
 8004074:	f000 fa7c 	bl	8004570 <_free_r>
 8004078:	2300      	movs	r3, #0
 800407a:	6363      	str	r3, [r4, #52]	; 0x34
 800407c:	2300      	movs	r3, #0
 800407e:	61a3      	str	r3, [r4, #24]
 8004080:	6063      	str	r3, [r4, #4]
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	0619      	lsls	r1, r3, #24
 8004086:	d503      	bpl.n	8004090 <setvbuf+0x7c>
 8004088:	6921      	ldr	r1, [r4, #16]
 800408a:	4638      	mov	r0, r7
 800408c:	f000 fa70 	bl	8004570 <_free_r>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	f1b8 0f02 	cmp.w	r8, #2
 800409e:	81a3      	strh	r3, [r4, #12]
 80040a0:	d06c      	beq.n	800417c <setvbuf+0x168>
 80040a2:	ab01      	add	r3, sp, #4
 80040a4:	466a      	mov	r2, sp
 80040a6:	4621      	mov	r1, r4
 80040a8:	4638      	mov	r0, r7
 80040aa:	f000 fa33 	bl	8004514 <__swhatbuf_r>
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	4318      	orrs	r0, r3
 80040b2:	81a0      	strh	r0, [r4, #12]
 80040b4:	2d00      	cmp	r5, #0
 80040b6:	d130      	bne.n	800411a <setvbuf+0x106>
 80040b8:	9d00      	ldr	r5, [sp, #0]
 80040ba:	4628      	mov	r0, r5
 80040bc:	f000 fa50 	bl	8004560 <malloc>
 80040c0:	4606      	mov	r6, r0
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d155      	bne.n	8004172 <setvbuf+0x15e>
 80040c6:	f8dd 9000 	ldr.w	r9, [sp]
 80040ca:	45a9      	cmp	r9, r5
 80040cc:	d14a      	bne.n	8004164 <setvbuf+0x150>
 80040ce:	f04f 35ff 	mov.w	r5, #4294967295
 80040d2:	2200      	movs	r2, #0
 80040d4:	60a2      	str	r2, [r4, #8]
 80040d6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80040da:	6022      	str	r2, [r4, #0]
 80040dc:	6122      	str	r2, [r4, #16]
 80040de:	2201      	movs	r2, #1
 80040e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040e4:	6162      	str	r2, [r4, #20]
 80040e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040e8:	f043 0302 	orr.w	r3, r3, #2
 80040ec:	07d2      	lsls	r2, r2, #31
 80040ee:	81a3      	strh	r3, [r4, #12]
 80040f0:	d405      	bmi.n	80040fe <setvbuf+0xea>
 80040f2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80040f6:	d102      	bne.n	80040fe <setvbuf+0xea>
 80040f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040fa:	f000 fa0a 	bl	8004512 <__retarget_lock_release_recursive>
 80040fe:	4628      	mov	r0, r5
 8004100:	b003      	add	sp, #12
 8004102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <setvbuf+0x184>)
 8004108:	429c      	cmp	r4, r3
 800410a:	d101      	bne.n	8004110 <setvbuf+0xfc>
 800410c:	68bc      	ldr	r4, [r7, #8]
 800410e:	e793      	b.n	8004038 <setvbuf+0x24>
 8004110:	4b22      	ldr	r3, [pc, #136]	; (800419c <setvbuf+0x188>)
 8004112:	429c      	cmp	r4, r3
 8004114:	bf08      	it	eq
 8004116:	68fc      	ldreq	r4, [r7, #12]
 8004118:	e78e      	b.n	8004038 <setvbuf+0x24>
 800411a:	2e00      	cmp	r6, #0
 800411c:	d0cd      	beq.n	80040ba <setvbuf+0xa6>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	b913      	cbnz	r3, 8004128 <setvbuf+0x114>
 8004122:	4638      	mov	r0, r7
 8004124:	f000 f956 	bl	80043d4 <__sinit>
 8004128:	f1b8 0f01 	cmp.w	r8, #1
 800412c:	bf08      	it	eq
 800412e:	89a3      	ldrheq	r3, [r4, #12]
 8004130:	6026      	str	r6, [r4, #0]
 8004132:	bf04      	itt	eq
 8004134:	f043 0301 	orreq.w	r3, r3, #1
 8004138:	81a3      	strheq	r3, [r4, #12]
 800413a:	89a2      	ldrh	r2, [r4, #12]
 800413c:	f012 0308 	ands.w	r3, r2, #8
 8004140:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004144:	d01c      	beq.n	8004180 <setvbuf+0x16c>
 8004146:	07d3      	lsls	r3, r2, #31
 8004148:	bf41      	itttt	mi
 800414a:	2300      	movmi	r3, #0
 800414c:	426d      	negmi	r5, r5
 800414e:	60a3      	strmi	r3, [r4, #8]
 8004150:	61a5      	strmi	r5, [r4, #24]
 8004152:	bf58      	it	pl
 8004154:	60a5      	strpl	r5, [r4, #8]
 8004156:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004158:	f015 0501 	ands.w	r5, r5, #1
 800415c:	d115      	bne.n	800418a <setvbuf+0x176>
 800415e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004162:	e7c8      	b.n	80040f6 <setvbuf+0xe2>
 8004164:	4648      	mov	r0, r9
 8004166:	f000 f9fb 	bl	8004560 <malloc>
 800416a:	4606      	mov	r6, r0
 800416c:	2800      	cmp	r0, #0
 800416e:	d0ae      	beq.n	80040ce <setvbuf+0xba>
 8004170:	464d      	mov	r5, r9
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	e7d0      	b.n	800411e <setvbuf+0x10a>
 800417c:	2500      	movs	r5, #0
 800417e:	e7a8      	b.n	80040d2 <setvbuf+0xbe>
 8004180:	60a3      	str	r3, [r4, #8]
 8004182:	e7e8      	b.n	8004156 <setvbuf+0x142>
 8004184:	f04f 35ff 	mov.w	r5, #4294967295
 8004188:	e7b9      	b.n	80040fe <setvbuf+0xea>
 800418a:	2500      	movs	r5, #0
 800418c:	e7b7      	b.n	80040fe <setvbuf+0xea>
 800418e:	bf00      	nop
 8004190:	2000000c 	.word	0x2000000c
 8004194:	080048f4 	.word	0x080048f4
 8004198:	08004914 	.word	0x08004914
 800419c:	080048d4 	.word	0x080048d4

080041a0 <__sflush_r>:
 80041a0:	898a      	ldrh	r2, [r1, #12]
 80041a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a6:	4605      	mov	r5, r0
 80041a8:	0710      	lsls	r0, r2, #28
 80041aa:	460c      	mov	r4, r1
 80041ac:	d458      	bmi.n	8004260 <__sflush_r+0xc0>
 80041ae:	684b      	ldr	r3, [r1, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	dc05      	bgt.n	80041c0 <__sflush_r+0x20>
 80041b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	dc02      	bgt.n	80041c0 <__sflush_r+0x20>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041c2:	2e00      	cmp	r6, #0
 80041c4:	d0f9      	beq.n	80041ba <__sflush_r+0x1a>
 80041c6:	2300      	movs	r3, #0
 80041c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041cc:	682f      	ldr	r7, [r5, #0]
 80041ce:	602b      	str	r3, [r5, #0]
 80041d0:	d032      	beq.n	8004238 <__sflush_r+0x98>
 80041d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	075a      	lsls	r2, r3, #29
 80041d8:	d505      	bpl.n	80041e6 <__sflush_r+0x46>
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	1ac0      	subs	r0, r0, r3
 80041de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041e0:	b10b      	cbz	r3, 80041e6 <__sflush_r+0x46>
 80041e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041e4:	1ac0      	subs	r0, r0, r3
 80041e6:	2300      	movs	r3, #0
 80041e8:	4602      	mov	r2, r0
 80041ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ec:	6a21      	ldr	r1, [r4, #32]
 80041ee:	4628      	mov	r0, r5
 80041f0:	47b0      	blx	r6
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	d106      	bne.n	8004206 <__sflush_r+0x66>
 80041f8:	6829      	ldr	r1, [r5, #0]
 80041fa:	291d      	cmp	r1, #29
 80041fc:	d82c      	bhi.n	8004258 <__sflush_r+0xb8>
 80041fe:	4a2a      	ldr	r2, [pc, #168]	; (80042a8 <__sflush_r+0x108>)
 8004200:	40ca      	lsrs	r2, r1
 8004202:	07d6      	lsls	r6, r2, #31
 8004204:	d528      	bpl.n	8004258 <__sflush_r+0xb8>
 8004206:	2200      	movs	r2, #0
 8004208:	6062      	str	r2, [r4, #4]
 800420a:	04d9      	lsls	r1, r3, #19
 800420c:	6922      	ldr	r2, [r4, #16]
 800420e:	6022      	str	r2, [r4, #0]
 8004210:	d504      	bpl.n	800421c <__sflush_r+0x7c>
 8004212:	1c42      	adds	r2, r0, #1
 8004214:	d101      	bne.n	800421a <__sflush_r+0x7a>
 8004216:	682b      	ldr	r3, [r5, #0]
 8004218:	b903      	cbnz	r3, 800421c <__sflush_r+0x7c>
 800421a:	6560      	str	r0, [r4, #84]	; 0x54
 800421c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800421e:	602f      	str	r7, [r5, #0]
 8004220:	2900      	cmp	r1, #0
 8004222:	d0ca      	beq.n	80041ba <__sflush_r+0x1a>
 8004224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004228:	4299      	cmp	r1, r3
 800422a:	d002      	beq.n	8004232 <__sflush_r+0x92>
 800422c:	4628      	mov	r0, r5
 800422e:	f000 f99f 	bl	8004570 <_free_r>
 8004232:	2000      	movs	r0, #0
 8004234:	6360      	str	r0, [r4, #52]	; 0x34
 8004236:	e7c1      	b.n	80041bc <__sflush_r+0x1c>
 8004238:	6a21      	ldr	r1, [r4, #32]
 800423a:	2301      	movs	r3, #1
 800423c:	4628      	mov	r0, r5
 800423e:	47b0      	blx	r6
 8004240:	1c41      	adds	r1, r0, #1
 8004242:	d1c7      	bne.n	80041d4 <__sflush_r+0x34>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0c4      	beq.n	80041d4 <__sflush_r+0x34>
 800424a:	2b1d      	cmp	r3, #29
 800424c:	d001      	beq.n	8004252 <__sflush_r+0xb2>
 800424e:	2b16      	cmp	r3, #22
 8004250:	d101      	bne.n	8004256 <__sflush_r+0xb6>
 8004252:	602f      	str	r7, [r5, #0]
 8004254:	e7b1      	b.n	80041ba <__sflush_r+0x1a>
 8004256:	89a3      	ldrh	r3, [r4, #12]
 8004258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425c:	81a3      	strh	r3, [r4, #12]
 800425e:	e7ad      	b.n	80041bc <__sflush_r+0x1c>
 8004260:	690f      	ldr	r7, [r1, #16]
 8004262:	2f00      	cmp	r7, #0
 8004264:	d0a9      	beq.n	80041ba <__sflush_r+0x1a>
 8004266:	0793      	lsls	r3, r2, #30
 8004268:	680e      	ldr	r6, [r1, #0]
 800426a:	bf08      	it	eq
 800426c:	694b      	ldreq	r3, [r1, #20]
 800426e:	600f      	str	r7, [r1, #0]
 8004270:	bf18      	it	ne
 8004272:	2300      	movne	r3, #0
 8004274:	eba6 0807 	sub.w	r8, r6, r7
 8004278:	608b      	str	r3, [r1, #8]
 800427a:	f1b8 0f00 	cmp.w	r8, #0
 800427e:	dd9c      	ble.n	80041ba <__sflush_r+0x1a>
 8004280:	6a21      	ldr	r1, [r4, #32]
 8004282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004284:	4643      	mov	r3, r8
 8004286:	463a      	mov	r2, r7
 8004288:	4628      	mov	r0, r5
 800428a:	47b0      	blx	r6
 800428c:	2800      	cmp	r0, #0
 800428e:	dc06      	bgt.n	800429e <__sflush_r+0xfe>
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	e78e      	b.n	80041bc <__sflush_r+0x1c>
 800429e:	4407      	add	r7, r0
 80042a0:	eba8 0800 	sub.w	r8, r8, r0
 80042a4:	e7e9      	b.n	800427a <__sflush_r+0xda>
 80042a6:	bf00      	nop
 80042a8:	20400001 	.word	0x20400001

080042ac <_fflush_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	690b      	ldr	r3, [r1, #16]
 80042b0:	4605      	mov	r5, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	b913      	cbnz	r3, 80042bc <_fflush_r+0x10>
 80042b6:	2500      	movs	r5, #0
 80042b8:	4628      	mov	r0, r5
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	b118      	cbz	r0, 80042c6 <_fflush_r+0x1a>
 80042be:	6983      	ldr	r3, [r0, #24]
 80042c0:	b90b      	cbnz	r3, 80042c6 <_fflush_r+0x1a>
 80042c2:	f000 f887 	bl	80043d4 <__sinit>
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <_fflush_r+0x6c>)
 80042c8:	429c      	cmp	r4, r3
 80042ca:	d11b      	bne.n	8004304 <_fflush_r+0x58>
 80042cc:	686c      	ldr	r4, [r5, #4]
 80042ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ef      	beq.n	80042b6 <_fflush_r+0xa>
 80042d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042d8:	07d0      	lsls	r0, r2, #31
 80042da:	d404      	bmi.n	80042e6 <_fflush_r+0x3a>
 80042dc:	0599      	lsls	r1, r3, #22
 80042de:	d402      	bmi.n	80042e6 <_fflush_r+0x3a>
 80042e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042e2:	f000 f915 	bl	8004510 <__retarget_lock_acquire_recursive>
 80042e6:	4628      	mov	r0, r5
 80042e8:	4621      	mov	r1, r4
 80042ea:	f7ff ff59 	bl	80041a0 <__sflush_r>
 80042ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042f0:	07da      	lsls	r2, r3, #31
 80042f2:	4605      	mov	r5, r0
 80042f4:	d4e0      	bmi.n	80042b8 <_fflush_r+0xc>
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	059b      	lsls	r3, r3, #22
 80042fa:	d4dd      	bmi.n	80042b8 <_fflush_r+0xc>
 80042fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042fe:	f000 f908 	bl	8004512 <__retarget_lock_release_recursive>
 8004302:	e7d9      	b.n	80042b8 <_fflush_r+0xc>
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <_fflush_r+0x70>)
 8004306:	429c      	cmp	r4, r3
 8004308:	d101      	bne.n	800430e <_fflush_r+0x62>
 800430a:	68ac      	ldr	r4, [r5, #8]
 800430c:	e7df      	b.n	80042ce <_fflush_r+0x22>
 800430e:	4b04      	ldr	r3, [pc, #16]	; (8004320 <_fflush_r+0x74>)
 8004310:	429c      	cmp	r4, r3
 8004312:	bf08      	it	eq
 8004314:	68ec      	ldreq	r4, [r5, #12]
 8004316:	e7da      	b.n	80042ce <_fflush_r+0x22>
 8004318:	080048f4 	.word	0x080048f4
 800431c:	08004914 	.word	0x08004914
 8004320:	080048d4 	.word	0x080048d4

08004324 <std>:
 8004324:	2300      	movs	r3, #0
 8004326:	b510      	push	{r4, lr}
 8004328:	4604      	mov	r4, r0
 800432a:	e9c0 3300 	strd	r3, r3, [r0]
 800432e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004332:	6083      	str	r3, [r0, #8]
 8004334:	8181      	strh	r1, [r0, #12]
 8004336:	6643      	str	r3, [r0, #100]	; 0x64
 8004338:	81c2      	strh	r2, [r0, #14]
 800433a:	6183      	str	r3, [r0, #24]
 800433c:	4619      	mov	r1, r3
 800433e:	2208      	movs	r2, #8
 8004340:	305c      	adds	r0, #92	; 0x5c
 8004342:	f7ff fe5f 	bl	8004004 <memset>
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <std+0x38>)
 8004348:	6263      	str	r3, [r4, #36]	; 0x24
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <std+0x3c>)
 800434c:	62a3      	str	r3, [r4, #40]	; 0x28
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <std+0x40>)
 8004350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004352:	4b05      	ldr	r3, [pc, #20]	; (8004368 <std+0x44>)
 8004354:	6224      	str	r4, [r4, #32]
 8004356:	6323      	str	r3, [r4, #48]	; 0x30
 8004358:	bd10      	pop	{r4, pc}
 800435a:	bf00      	nop
 800435c:	08004751 	.word	0x08004751
 8004360:	08004773 	.word	0x08004773
 8004364:	080047ab 	.word	0x080047ab
 8004368:	080047cf 	.word	0x080047cf

0800436c <_cleanup_r>:
 800436c:	4901      	ldr	r1, [pc, #4]	; (8004374 <_cleanup_r+0x8>)
 800436e:	f000 b8af 	b.w	80044d0 <_fwalk_reent>
 8004372:	bf00      	nop
 8004374:	080042ad 	.word	0x080042ad

08004378 <__sfmoreglue>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	2268      	movs	r2, #104	; 0x68
 800437c:	1e4d      	subs	r5, r1, #1
 800437e:	4355      	muls	r5, r2
 8004380:	460e      	mov	r6, r1
 8004382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004386:	f000 f95f 	bl	8004648 <_malloc_r>
 800438a:	4604      	mov	r4, r0
 800438c:	b140      	cbz	r0, 80043a0 <__sfmoreglue+0x28>
 800438e:	2100      	movs	r1, #0
 8004390:	e9c0 1600 	strd	r1, r6, [r0]
 8004394:	300c      	adds	r0, #12
 8004396:	60a0      	str	r0, [r4, #8]
 8004398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800439c:	f7ff fe32 	bl	8004004 <memset>
 80043a0:	4620      	mov	r0, r4
 80043a2:	bd70      	pop	{r4, r5, r6, pc}

080043a4 <__sfp_lock_acquire>:
 80043a4:	4801      	ldr	r0, [pc, #4]	; (80043ac <__sfp_lock_acquire+0x8>)
 80043a6:	f000 b8b3 	b.w	8004510 <__retarget_lock_acquire_recursive>
 80043aa:	bf00      	nop
 80043ac:	200001bd 	.word	0x200001bd

080043b0 <__sfp_lock_release>:
 80043b0:	4801      	ldr	r0, [pc, #4]	; (80043b8 <__sfp_lock_release+0x8>)
 80043b2:	f000 b8ae 	b.w	8004512 <__retarget_lock_release_recursive>
 80043b6:	bf00      	nop
 80043b8:	200001bd 	.word	0x200001bd

080043bc <__sinit_lock_acquire>:
 80043bc:	4801      	ldr	r0, [pc, #4]	; (80043c4 <__sinit_lock_acquire+0x8>)
 80043be:	f000 b8a7 	b.w	8004510 <__retarget_lock_acquire_recursive>
 80043c2:	bf00      	nop
 80043c4:	200001be 	.word	0x200001be

080043c8 <__sinit_lock_release>:
 80043c8:	4801      	ldr	r0, [pc, #4]	; (80043d0 <__sinit_lock_release+0x8>)
 80043ca:	f000 b8a2 	b.w	8004512 <__retarget_lock_release_recursive>
 80043ce:	bf00      	nop
 80043d0:	200001be 	.word	0x200001be

080043d4 <__sinit>:
 80043d4:	b510      	push	{r4, lr}
 80043d6:	4604      	mov	r4, r0
 80043d8:	f7ff fff0 	bl	80043bc <__sinit_lock_acquire>
 80043dc:	69a3      	ldr	r3, [r4, #24]
 80043de:	b11b      	cbz	r3, 80043e8 <__sinit+0x14>
 80043e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e4:	f7ff bff0 	b.w	80043c8 <__sinit_lock_release>
 80043e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043ec:	6523      	str	r3, [r4, #80]	; 0x50
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <__sinit+0x68>)
 80043f0:	4a13      	ldr	r2, [pc, #76]	; (8004440 <__sinit+0x6c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80043f6:	42a3      	cmp	r3, r4
 80043f8:	bf04      	itt	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	61a3      	streq	r3, [r4, #24]
 80043fe:	4620      	mov	r0, r4
 8004400:	f000 f820 	bl	8004444 <__sfp>
 8004404:	6060      	str	r0, [r4, #4]
 8004406:	4620      	mov	r0, r4
 8004408:	f000 f81c 	bl	8004444 <__sfp>
 800440c:	60a0      	str	r0, [r4, #8]
 800440e:	4620      	mov	r0, r4
 8004410:	f000 f818 	bl	8004444 <__sfp>
 8004414:	2200      	movs	r2, #0
 8004416:	60e0      	str	r0, [r4, #12]
 8004418:	2104      	movs	r1, #4
 800441a:	6860      	ldr	r0, [r4, #4]
 800441c:	f7ff ff82 	bl	8004324 <std>
 8004420:	68a0      	ldr	r0, [r4, #8]
 8004422:	2201      	movs	r2, #1
 8004424:	2109      	movs	r1, #9
 8004426:	f7ff ff7d 	bl	8004324 <std>
 800442a:	68e0      	ldr	r0, [r4, #12]
 800442c:	2202      	movs	r2, #2
 800442e:	2112      	movs	r1, #18
 8004430:	f7ff ff78 	bl	8004324 <std>
 8004434:	2301      	movs	r3, #1
 8004436:	61a3      	str	r3, [r4, #24]
 8004438:	e7d2      	b.n	80043e0 <__sinit+0xc>
 800443a:	bf00      	nop
 800443c:	080048d0 	.word	0x080048d0
 8004440:	0800436d 	.word	0x0800436d

08004444 <__sfp>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	4607      	mov	r7, r0
 8004448:	f7ff ffac 	bl	80043a4 <__sfp_lock_acquire>
 800444c:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <__sfp+0x84>)
 800444e:	681e      	ldr	r6, [r3, #0]
 8004450:	69b3      	ldr	r3, [r6, #24]
 8004452:	b913      	cbnz	r3, 800445a <__sfp+0x16>
 8004454:	4630      	mov	r0, r6
 8004456:	f7ff ffbd 	bl	80043d4 <__sinit>
 800445a:	3648      	adds	r6, #72	; 0x48
 800445c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004460:	3b01      	subs	r3, #1
 8004462:	d503      	bpl.n	800446c <__sfp+0x28>
 8004464:	6833      	ldr	r3, [r6, #0]
 8004466:	b30b      	cbz	r3, 80044ac <__sfp+0x68>
 8004468:	6836      	ldr	r6, [r6, #0]
 800446a:	e7f7      	b.n	800445c <__sfp+0x18>
 800446c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004470:	b9d5      	cbnz	r5, 80044a8 <__sfp+0x64>
 8004472:	4b16      	ldr	r3, [pc, #88]	; (80044cc <__sfp+0x88>)
 8004474:	60e3      	str	r3, [r4, #12]
 8004476:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800447a:	6665      	str	r5, [r4, #100]	; 0x64
 800447c:	f000 f847 	bl	800450e <__retarget_lock_init_recursive>
 8004480:	f7ff ff96 	bl	80043b0 <__sfp_lock_release>
 8004484:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004488:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800448c:	6025      	str	r5, [r4, #0]
 800448e:	61a5      	str	r5, [r4, #24]
 8004490:	2208      	movs	r2, #8
 8004492:	4629      	mov	r1, r5
 8004494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004498:	f7ff fdb4 	bl	8004004 <memset>
 800449c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044a4:	4620      	mov	r0, r4
 80044a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044a8:	3468      	adds	r4, #104	; 0x68
 80044aa:	e7d9      	b.n	8004460 <__sfp+0x1c>
 80044ac:	2104      	movs	r1, #4
 80044ae:	4638      	mov	r0, r7
 80044b0:	f7ff ff62 	bl	8004378 <__sfmoreglue>
 80044b4:	4604      	mov	r4, r0
 80044b6:	6030      	str	r0, [r6, #0]
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d1d5      	bne.n	8004468 <__sfp+0x24>
 80044bc:	f7ff ff78 	bl	80043b0 <__sfp_lock_release>
 80044c0:	230c      	movs	r3, #12
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	e7ee      	b.n	80044a4 <__sfp+0x60>
 80044c6:	bf00      	nop
 80044c8:	080048d0 	.word	0x080048d0
 80044cc:	ffff0001 	.word	0xffff0001

080044d0 <_fwalk_reent>:
 80044d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044d4:	4606      	mov	r6, r0
 80044d6:	4688      	mov	r8, r1
 80044d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044dc:	2700      	movs	r7, #0
 80044de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044e2:	f1b9 0901 	subs.w	r9, r9, #1
 80044e6:	d505      	bpl.n	80044f4 <_fwalk_reent+0x24>
 80044e8:	6824      	ldr	r4, [r4, #0]
 80044ea:	2c00      	cmp	r4, #0
 80044ec:	d1f7      	bne.n	80044de <_fwalk_reent+0xe>
 80044ee:	4638      	mov	r0, r7
 80044f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044f4:	89ab      	ldrh	r3, [r5, #12]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d907      	bls.n	800450a <_fwalk_reent+0x3a>
 80044fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044fe:	3301      	adds	r3, #1
 8004500:	d003      	beq.n	800450a <_fwalk_reent+0x3a>
 8004502:	4629      	mov	r1, r5
 8004504:	4630      	mov	r0, r6
 8004506:	47c0      	blx	r8
 8004508:	4307      	orrs	r7, r0
 800450a:	3568      	adds	r5, #104	; 0x68
 800450c:	e7e9      	b.n	80044e2 <_fwalk_reent+0x12>

0800450e <__retarget_lock_init_recursive>:
 800450e:	4770      	bx	lr

08004510 <__retarget_lock_acquire_recursive>:
 8004510:	4770      	bx	lr

08004512 <__retarget_lock_release_recursive>:
 8004512:	4770      	bx	lr

08004514 <__swhatbuf_r>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	460e      	mov	r6, r1
 8004518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451c:	2900      	cmp	r1, #0
 800451e:	b096      	sub	sp, #88	; 0x58
 8004520:	4614      	mov	r4, r2
 8004522:	461d      	mov	r5, r3
 8004524:	da08      	bge.n	8004538 <__swhatbuf_r+0x24>
 8004526:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	602a      	str	r2, [r5, #0]
 800452e:	061a      	lsls	r2, r3, #24
 8004530:	d410      	bmi.n	8004554 <__swhatbuf_r+0x40>
 8004532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004536:	e00e      	b.n	8004556 <__swhatbuf_r+0x42>
 8004538:	466a      	mov	r2, sp
 800453a:	f000 f96f 	bl	800481c <_fstat_r>
 800453e:	2800      	cmp	r0, #0
 8004540:	dbf1      	blt.n	8004526 <__swhatbuf_r+0x12>
 8004542:	9a01      	ldr	r2, [sp, #4]
 8004544:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004548:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800454c:	425a      	negs	r2, r3
 800454e:	415a      	adcs	r2, r3
 8004550:	602a      	str	r2, [r5, #0]
 8004552:	e7ee      	b.n	8004532 <__swhatbuf_r+0x1e>
 8004554:	2340      	movs	r3, #64	; 0x40
 8004556:	2000      	movs	r0, #0
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	b016      	add	sp, #88	; 0x58
 800455c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004560 <malloc>:
 8004560:	4b02      	ldr	r3, [pc, #8]	; (800456c <malloc+0xc>)
 8004562:	4601      	mov	r1, r0
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	f000 b86f 	b.w	8004648 <_malloc_r>
 800456a:	bf00      	nop
 800456c:	2000000c 	.word	0x2000000c

08004570 <_free_r>:
 8004570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004572:	2900      	cmp	r1, #0
 8004574:	d044      	beq.n	8004600 <_free_r+0x90>
 8004576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800457a:	9001      	str	r0, [sp, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f1a1 0404 	sub.w	r4, r1, #4
 8004582:	bfb8      	it	lt
 8004584:	18e4      	addlt	r4, r4, r3
 8004586:	f000 f96d 	bl	8004864 <__malloc_lock>
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <_free_r+0x94>)
 800458c:	9801      	ldr	r0, [sp, #4]
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	b933      	cbnz	r3, 80045a0 <_free_r+0x30>
 8004592:	6063      	str	r3, [r4, #4]
 8004594:	6014      	str	r4, [r2, #0]
 8004596:	b003      	add	sp, #12
 8004598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800459c:	f000 b968 	b.w	8004870 <__malloc_unlock>
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	d908      	bls.n	80045b6 <_free_r+0x46>
 80045a4:	6825      	ldr	r5, [r4, #0]
 80045a6:	1961      	adds	r1, r4, r5
 80045a8:	428b      	cmp	r3, r1
 80045aa:	bf01      	itttt	eq
 80045ac:	6819      	ldreq	r1, [r3, #0]
 80045ae:	685b      	ldreq	r3, [r3, #4]
 80045b0:	1949      	addeq	r1, r1, r5
 80045b2:	6021      	streq	r1, [r4, #0]
 80045b4:	e7ed      	b.n	8004592 <_free_r+0x22>
 80045b6:	461a      	mov	r2, r3
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	b10b      	cbz	r3, 80045c0 <_free_r+0x50>
 80045bc:	42a3      	cmp	r3, r4
 80045be:	d9fa      	bls.n	80045b6 <_free_r+0x46>
 80045c0:	6811      	ldr	r1, [r2, #0]
 80045c2:	1855      	adds	r5, r2, r1
 80045c4:	42a5      	cmp	r5, r4
 80045c6:	d10b      	bne.n	80045e0 <_free_r+0x70>
 80045c8:	6824      	ldr	r4, [r4, #0]
 80045ca:	4421      	add	r1, r4
 80045cc:	1854      	adds	r4, r2, r1
 80045ce:	42a3      	cmp	r3, r4
 80045d0:	6011      	str	r1, [r2, #0]
 80045d2:	d1e0      	bne.n	8004596 <_free_r+0x26>
 80045d4:	681c      	ldr	r4, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	6053      	str	r3, [r2, #4]
 80045da:	4421      	add	r1, r4
 80045dc:	6011      	str	r1, [r2, #0]
 80045de:	e7da      	b.n	8004596 <_free_r+0x26>
 80045e0:	d902      	bls.n	80045e8 <_free_r+0x78>
 80045e2:	230c      	movs	r3, #12
 80045e4:	6003      	str	r3, [r0, #0]
 80045e6:	e7d6      	b.n	8004596 <_free_r+0x26>
 80045e8:	6825      	ldr	r5, [r4, #0]
 80045ea:	1961      	adds	r1, r4, r5
 80045ec:	428b      	cmp	r3, r1
 80045ee:	bf04      	itt	eq
 80045f0:	6819      	ldreq	r1, [r3, #0]
 80045f2:	685b      	ldreq	r3, [r3, #4]
 80045f4:	6063      	str	r3, [r4, #4]
 80045f6:	bf04      	itt	eq
 80045f8:	1949      	addeq	r1, r1, r5
 80045fa:	6021      	streq	r1, [r4, #0]
 80045fc:	6054      	str	r4, [r2, #4]
 80045fe:	e7ca      	b.n	8004596 <_free_r+0x26>
 8004600:	b003      	add	sp, #12
 8004602:	bd30      	pop	{r4, r5, pc}
 8004604:	200001c0 	.word	0x200001c0

08004608 <sbrk_aligned>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	4e0e      	ldr	r6, [pc, #56]	; (8004644 <sbrk_aligned+0x3c>)
 800460c:	460c      	mov	r4, r1
 800460e:	6831      	ldr	r1, [r6, #0]
 8004610:	4605      	mov	r5, r0
 8004612:	b911      	cbnz	r1, 800461a <sbrk_aligned+0x12>
 8004614:	f000 f88c 	bl	8004730 <_sbrk_r>
 8004618:	6030      	str	r0, [r6, #0]
 800461a:	4621      	mov	r1, r4
 800461c:	4628      	mov	r0, r5
 800461e:	f000 f887 	bl	8004730 <_sbrk_r>
 8004622:	1c43      	adds	r3, r0, #1
 8004624:	d00a      	beq.n	800463c <sbrk_aligned+0x34>
 8004626:	1cc4      	adds	r4, r0, #3
 8004628:	f024 0403 	bic.w	r4, r4, #3
 800462c:	42a0      	cmp	r0, r4
 800462e:	d007      	beq.n	8004640 <sbrk_aligned+0x38>
 8004630:	1a21      	subs	r1, r4, r0
 8004632:	4628      	mov	r0, r5
 8004634:	f000 f87c 	bl	8004730 <_sbrk_r>
 8004638:	3001      	adds	r0, #1
 800463a:	d101      	bne.n	8004640 <sbrk_aligned+0x38>
 800463c:	f04f 34ff 	mov.w	r4, #4294967295
 8004640:	4620      	mov	r0, r4
 8004642:	bd70      	pop	{r4, r5, r6, pc}
 8004644:	200001c4 	.word	0x200001c4

08004648 <_malloc_r>:
 8004648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800464c:	1ccd      	adds	r5, r1, #3
 800464e:	f025 0503 	bic.w	r5, r5, #3
 8004652:	3508      	adds	r5, #8
 8004654:	2d0c      	cmp	r5, #12
 8004656:	bf38      	it	cc
 8004658:	250c      	movcc	r5, #12
 800465a:	2d00      	cmp	r5, #0
 800465c:	4607      	mov	r7, r0
 800465e:	db01      	blt.n	8004664 <_malloc_r+0x1c>
 8004660:	42a9      	cmp	r1, r5
 8004662:	d905      	bls.n	8004670 <_malloc_r+0x28>
 8004664:	230c      	movs	r3, #12
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	2600      	movs	r6, #0
 800466a:	4630      	mov	r0, r6
 800466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004670:	4e2e      	ldr	r6, [pc, #184]	; (800472c <_malloc_r+0xe4>)
 8004672:	f000 f8f7 	bl	8004864 <__malloc_lock>
 8004676:	6833      	ldr	r3, [r6, #0]
 8004678:	461c      	mov	r4, r3
 800467a:	bb34      	cbnz	r4, 80046ca <_malloc_r+0x82>
 800467c:	4629      	mov	r1, r5
 800467e:	4638      	mov	r0, r7
 8004680:	f7ff ffc2 	bl	8004608 <sbrk_aligned>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	4604      	mov	r4, r0
 8004688:	d14d      	bne.n	8004726 <_malloc_r+0xde>
 800468a:	6834      	ldr	r4, [r6, #0]
 800468c:	4626      	mov	r6, r4
 800468e:	2e00      	cmp	r6, #0
 8004690:	d140      	bne.n	8004714 <_malloc_r+0xcc>
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	4631      	mov	r1, r6
 8004696:	4638      	mov	r0, r7
 8004698:	eb04 0803 	add.w	r8, r4, r3
 800469c:	f000 f848 	bl	8004730 <_sbrk_r>
 80046a0:	4580      	cmp	r8, r0
 80046a2:	d13a      	bne.n	800471a <_malloc_r+0xd2>
 80046a4:	6821      	ldr	r1, [r4, #0]
 80046a6:	3503      	adds	r5, #3
 80046a8:	1a6d      	subs	r5, r5, r1
 80046aa:	f025 0503 	bic.w	r5, r5, #3
 80046ae:	3508      	adds	r5, #8
 80046b0:	2d0c      	cmp	r5, #12
 80046b2:	bf38      	it	cc
 80046b4:	250c      	movcc	r5, #12
 80046b6:	4629      	mov	r1, r5
 80046b8:	4638      	mov	r0, r7
 80046ba:	f7ff ffa5 	bl	8004608 <sbrk_aligned>
 80046be:	3001      	adds	r0, #1
 80046c0:	d02b      	beq.n	800471a <_malloc_r+0xd2>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	442b      	add	r3, r5
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	e00e      	b.n	80046e8 <_malloc_r+0xa0>
 80046ca:	6822      	ldr	r2, [r4, #0]
 80046cc:	1b52      	subs	r2, r2, r5
 80046ce:	d41e      	bmi.n	800470e <_malloc_r+0xc6>
 80046d0:	2a0b      	cmp	r2, #11
 80046d2:	d916      	bls.n	8004702 <_malloc_r+0xba>
 80046d4:	1961      	adds	r1, r4, r5
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	6025      	str	r5, [r4, #0]
 80046da:	bf18      	it	ne
 80046dc:	6059      	strne	r1, [r3, #4]
 80046de:	6863      	ldr	r3, [r4, #4]
 80046e0:	bf08      	it	eq
 80046e2:	6031      	streq	r1, [r6, #0]
 80046e4:	5162      	str	r2, [r4, r5]
 80046e6:	604b      	str	r3, [r1, #4]
 80046e8:	4638      	mov	r0, r7
 80046ea:	f104 060b 	add.w	r6, r4, #11
 80046ee:	f000 f8bf 	bl	8004870 <__malloc_unlock>
 80046f2:	f026 0607 	bic.w	r6, r6, #7
 80046f6:	1d23      	adds	r3, r4, #4
 80046f8:	1af2      	subs	r2, r6, r3
 80046fa:	d0b6      	beq.n	800466a <_malloc_r+0x22>
 80046fc:	1b9b      	subs	r3, r3, r6
 80046fe:	50a3      	str	r3, [r4, r2]
 8004700:	e7b3      	b.n	800466a <_malloc_r+0x22>
 8004702:	6862      	ldr	r2, [r4, #4]
 8004704:	42a3      	cmp	r3, r4
 8004706:	bf0c      	ite	eq
 8004708:	6032      	streq	r2, [r6, #0]
 800470a:	605a      	strne	r2, [r3, #4]
 800470c:	e7ec      	b.n	80046e8 <_malloc_r+0xa0>
 800470e:	4623      	mov	r3, r4
 8004710:	6864      	ldr	r4, [r4, #4]
 8004712:	e7b2      	b.n	800467a <_malloc_r+0x32>
 8004714:	4634      	mov	r4, r6
 8004716:	6876      	ldr	r6, [r6, #4]
 8004718:	e7b9      	b.n	800468e <_malloc_r+0x46>
 800471a:	230c      	movs	r3, #12
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	4638      	mov	r0, r7
 8004720:	f000 f8a6 	bl	8004870 <__malloc_unlock>
 8004724:	e7a1      	b.n	800466a <_malloc_r+0x22>
 8004726:	6025      	str	r5, [r4, #0]
 8004728:	e7de      	b.n	80046e8 <_malloc_r+0xa0>
 800472a:	bf00      	nop
 800472c:	200001c0 	.word	0x200001c0

08004730 <_sbrk_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d06      	ldr	r5, [pc, #24]	; (800474c <_sbrk_r+0x1c>)
 8004734:	2300      	movs	r3, #0
 8004736:	4604      	mov	r4, r0
 8004738:	4608      	mov	r0, r1
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	f7fd f8a4 	bl	8001888 <_sbrk>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_sbrk_r+0x1a>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b103      	cbz	r3, 800474a <_sbrk_r+0x1a>
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	200001c8 	.word	0x200001c8

08004750 <__sread>:
 8004750:	b510      	push	{r4, lr}
 8004752:	460c      	mov	r4, r1
 8004754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004758:	f000 f890 	bl	800487c <_read_r>
 800475c:	2800      	cmp	r0, #0
 800475e:	bfab      	itete	ge
 8004760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004762:	89a3      	ldrhlt	r3, [r4, #12]
 8004764:	181b      	addge	r3, r3, r0
 8004766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800476a:	bfac      	ite	ge
 800476c:	6563      	strge	r3, [r4, #84]	; 0x54
 800476e:	81a3      	strhlt	r3, [r4, #12]
 8004770:	bd10      	pop	{r4, pc}

08004772 <__swrite>:
 8004772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004776:	461f      	mov	r7, r3
 8004778:	898b      	ldrh	r3, [r1, #12]
 800477a:	05db      	lsls	r3, r3, #23
 800477c:	4605      	mov	r5, r0
 800477e:	460c      	mov	r4, r1
 8004780:	4616      	mov	r6, r2
 8004782:	d505      	bpl.n	8004790 <__swrite+0x1e>
 8004784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004788:	2302      	movs	r3, #2
 800478a:	2200      	movs	r2, #0
 800478c:	f000 f858 	bl	8004840 <_lseek_r>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	4632      	mov	r2, r6
 800479e:	463b      	mov	r3, r7
 80047a0:	4628      	mov	r0, r5
 80047a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047a6:	f000 b817 	b.w	80047d8 <_write_r>

080047aa <__sseek>:
 80047aa:	b510      	push	{r4, lr}
 80047ac:	460c      	mov	r4, r1
 80047ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b2:	f000 f845 	bl	8004840 <_lseek_r>
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	bf15      	itete	ne
 80047bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80047be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047c6:	81a3      	strheq	r3, [r4, #12]
 80047c8:	bf18      	it	ne
 80047ca:	81a3      	strhne	r3, [r4, #12]
 80047cc:	bd10      	pop	{r4, pc}

080047ce <__sclose>:
 80047ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d2:	f000 b813 	b.w	80047fc <_close_r>
	...

080047d8 <_write_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	4d07      	ldr	r5, [pc, #28]	; (80047f8 <_write_r+0x20>)
 80047dc:	4604      	mov	r4, r0
 80047de:	4608      	mov	r0, r1
 80047e0:	4611      	mov	r1, r2
 80047e2:	2200      	movs	r2, #0
 80047e4:	602a      	str	r2, [r5, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f7fc faa2 	bl	8000d30 <_write>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_write_r+0x1e>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_write_r+0x1e>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	200001c8 	.word	0x200001c8

080047fc <_close_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4d06      	ldr	r5, [pc, #24]	; (8004818 <_close_r+0x1c>)
 8004800:	2300      	movs	r3, #0
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	602b      	str	r3, [r5, #0]
 8004808:	f7fd f815 	bl	8001836 <_close>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d102      	bne.n	8004816 <_close_r+0x1a>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	b103      	cbz	r3, 8004816 <_close_r+0x1a>
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	bd38      	pop	{r3, r4, r5, pc}
 8004818:	200001c8 	.word	0x200001c8

0800481c <_fstat_r>:
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	4d07      	ldr	r5, [pc, #28]	; (800483c <_fstat_r+0x20>)
 8004820:	2300      	movs	r3, #0
 8004822:	4604      	mov	r4, r0
 8004824:	4608      	mov	r0, r1
 8004826:	4611      	mov	r1, r2
 8004828:	602b      	str	r3, [r5, #0]
 800482a:	f7fd f810 	bl	800184e <_fstat>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d102      	bne.n	8004838 <_fstat_r+0x1c>
 8004832:	682b      	ldr	r3, [r5, #0]
 8004834:	b103      	cbz	r3, 8004838 <_fstat_r+0x1c>
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	bd38      	pop	{r3, r4, r5, pc}
 800483a:	bf00      	nop
 800483c:	200001c8 	.word	0x200001c8

08004840 <_lseek_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	4d07      	ldr	r5, [pc, #28]	; (8004860 <_lseek_r+0x20>)
 8004844:	4604      	mov	r4, r0
 8004846:	4608      	mov	r0, r1
 8004848:	4611      	mov	r1, r2
 800484a:	2200      	movs	r2, #0
 800484c:	602a      	str	r2, [r5, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	f7fd f80d 	bl	800186e <_lseek>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d102      	bne.n	800485e <_lseek_r+0x1e>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b103      	cbz	r3, 800485e <_lseek_r+0x1e>
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	200001c8 	.word	0x200001c8

08004864 <__malloc_lock>:
 8004864:	4801      	ldr	r0, [pc, #4]	; (800486c <__malloc_lock+0x8>)
 8004866:	f7ff be53 	b.w	8004510 <__retarget_lock_acquire_recursive>
 800486a:	bf00      	nop
 800486c:	200001bc 	.word	0x200001bc

08004870 <__malloc_unlock>:
 8004870:	4801      	ldr	r0, [pc, #4]	; (8004878 <__malloc_unlock+0x8>)
 8004872:	f7ff be4e 	b.w	8004512 <__retarget_lock_release_recursive>
 8004876:	bf00      	nop
 8004878:	200001bc 	.word	0x200001bc

0800487c <_read_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4d07      	ldr	r5, [pc, #28]	; (800489c <_read_r+0x20>)
 8004880:	4604      	mov	r4, r0
 8004882:	4608      	mov	r0, r1
 8004884:	4611      	mov	r1, r2
 8004886:	2200      	movs	r2, #0
 8004888:	602a      	str	r2, [r5, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	f7fc ffb6 	bl	80017fc <_read>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_read_r+0x1e>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_read_r+0x1e>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	200001c8 	.word	0x200001c8

080048a0 <_init>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr

080048ac <_fini>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr
